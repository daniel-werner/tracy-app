{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/model/drivers/app.drivers.platform.js","webpack:///./src/js/workout/app.workout.base_workout.js","webpack:///./src/js/model/drivers/app.drivers.hardware.js","webpack:///./src/js/model/drivers/app.drivers.battery.js","webpack:///./src/js/model/drivers/app.drivers.network.js","webpack:///./src/js/model/drivers/app.driver.factory.js","webpack:///./src/js/workout/app.workout.cycling_workout.js","webpack:///./src/js/workout/app.workout.running_workout.js","webpack:///./src/js/model/drivers/tizen/app.drivers.tizen.hardware.js","webpack:///./src/js/model/drivers/android/app.drivers.android.hardware.js","webpack:///./src/js/model/drivers/tizen/app.drivers.tizen.battery.js","webpack:///./src/js/model/drivers/android/app.drivers.android.battery.js","webpack:///./src/js/model/drivers/tizen/app.drivers.tizen.network.js","webpack:///./src/js/model/drivers/android/app.drivers.android.network.js","webpack:///./src/js/common/app.common.calculations.js","webpack:///./src/js/model/models.js","webpack:///./src/js/common/app.common.events.js","webpack:///./src/js/model/app.model.battery.js","webpack:///./src/js/model/app.model.network.js","webpack:///./src/js/model/app.model.geolocation.js","webpack:///./src/js/model/app.model.workout.js","webpack:///./src/js/workout/app.workout.point.js","webpack:///./node_modules/idb-wrapper/idbstore.js","webpack:///./src/js/model/app.model.sync.js","webpack:///./src/tests/test.js","webpack:///./src/tests/spec/WorkoutModelSpec.js","webpack:///./src/tests/spec/SyncModelSpec.js","webpack:///./src/tests/spec/unit/DriverFactorySpec.js","webpack:///./src/tests/spec/unit/WorkoutSpec.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","PLATFORMS","TIZEN","ANDROID","BROWSER","Platform","platform","tizen","_typeof","systeminfo","device","require","WORKOUT_STATUS_UNSAVED","WORKOUT_STATE_STOPPED","WORKOUT_TYPE_RUNNING","WORKOUT_TYPE_CYCLING","BaseWorkout","_classCallCheck","this","type","status","_points","_distance","_segmentIndex","_state","point","segment_index","push","points","_getCalculationPoints","calculate","pointA","pointB","calculationPoints","length","distance","window","app","common","calculations","calculateDistance","latitude","lat","longitude","lng","raw","heart_rate","elevation","HardwareDriver","commonEvents","events","BatteryDriver","level","NETWORKS","NetworkDriver","networkType","indexOf","DriverFactory","networkDriver","NetworkDriverTizen","NetworkDriverAndroid","batteryDriver","BatteryDriverTizen","BatteryDriverAndroid","hardwareDriver","HardwareDriverTizen","HardwareDriverAndroid","CyclingWorkout","_this","_possibleConstructorReturn","_getPrototypeOf","_speed","_calculateDistance","timeDiff","time","_calculateSpeed","RunningWorkout","_pace","_calculatePace","power","request","release","application","getCurrentApplication","exit","error","console","warn","message","cordova","plugins","backgroundMode","on","log","disableWebViewOptimizations","enable","disable","navigator","exitApp","addPropertyValueChangeListener","battery","isCharging","LOW_BATTERY","dispatchEvent","document","addEventListener","getPropertyValue","network","onGetNetworkTypeSuccess","onNetworkTypeChange","setTimeout","connection","Connection","NONE","METERS_UNIT","KILOMETERS_UNIT","toRadians","Math","PI","formatDistance","toFixed","formatUnit","calculateAngle","start","destination","sLon","dLon","sLat","dLat","deltaLon","atan2","tan","acos","sin","cos","formatted","unit","angleFromRotation","angle","calculatePathAngle","partialPath","totalPath","totalAngle","eventName","data","customEvent","CustomEvent","detail","model","init","driver","modelNetwork","isNetworkAvailable","getNetworkType","GEO_CHECKING_INTERVAL","GEO_CHECKING_COUNTER","modelGeolocation","geolocation","currentPosition","checkingCounter","onGetCurrentPositionSuccess","position","coords","isPositionEqual","onGetCurrentPositionError","getCurrentPosition","watchPosition","maximumAge","enableHighAccuracy","timeout","getGeoPosition","__webpack_exports__","_workout_app_workout_cycling_workout__WEBPACK_IMPORTED_MODULE_0__","_workout_app_workout_running_workout__WEBPACK_IMPORTED_MODULE_1__","_workout_app_workout_base_workout__WEBPACK_IMPORTED_MODULE_2__","IDBStore","modelWorkout","workout","workoutDB","updateUI","onModelGeolocationPositionAvailable","isActive","Point","altitude","timestamp","addPoint","WORKOUT_STATUS_SAVED","WORKOUT_STATUS_SYNCED","dbVersion","storeName","keyPath","autoIncrement","onStoreReady","backgroundRunEnable","togglePause","pause","backgroundRunDisable","resume","isHeartRateAvailable","save","put","toObject","id","clear","getList","getAll","filter","item","getItemsToSync","getWorkout","root","segmentIndex","heartRate","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","definition","global","undefined","defaultErrorHandler","defaultSuccessHandler","defaults","storePrefix","onError","indexes","implementationPreference","kwArgs","toString","dbName","parseInt","env","self","availableImplementations","implName","implementation","idb","keyRange","IDBKeyRange","webkitIDBKeyRange","mozIDBKeyRange","consts","READ_ONLY","READ_WRITE","VERSION_CHANGE","NEXT","NEXT_NO_DUPLICATE","PREV","PREV_NO_DUPLICATE","openDB","proto","constructor","version","db","store","_insertIdCount","openRequest","open","preventSuccessCallback","onerror","errorEvent","target","errorCode","hasVersionError","Error","errorMessage","onsuccess","event","result","objectStoreNames","contains","emptyTransaction","transaction","objectStore","existingIndexes","Array","slice","getIndexList","forEach","indexData","indexName","normalizeIndexData","hasIndex","actualIndex","index","complies","indexComplies","splice","onupgradeneeded","optionalParameters","createObjectStore","deleteIndex","createIndex","unique","multiEntry","_indexName","deleteDatabase","onSuccess","close","deleteRequest","putRequest","hasSuccess","putTransaction","oncomplete","callback","onabort","_addIdPropertyIfNeeded","getTransaction","getRequest","remove","removeTransaction","batch","dataArray","count","called","batchTransaction","onItemSuccess","operation","onItemError","err","abort","putBatch","batchData","map","upsertBatch","options","keyField","record","removeBatch","keyArray","getBatch","arrayType","getAllTransaction","_getAllNative","_getAllCursor","getAllRequest","all","cursorRequest","openCursor","cursor","clearTransaction","clearRequest","dataObj","Date","now","indexNames","actual","expected","every","exp","act","iterate","onItem","directionType","mixin","order","autoContinue","filterDuplicates","writeAccess","onEnd","limit","Infinity","offset","allowItemRejection","toLowerCase","cursorTransaction","cursorTarget","recordCount","advance","onItemReturn","query","processedItems","accept","countRequest","evt","makeKeyRange","hasLower","lower","hasUpper","upper","isOnly","only","bound","excludeLower","excludeUpper","lowerBound","upperBound","empty","source","modelSync","syncUrls","login","upload","bindEvents","e","stopPropagation","workouts","client","XMLHttpRequest","authHeaders","token","localStorage","getItem","header","syncAfterLogin","onreadystatechange","readyState","payload","JSON","stringify","setRequestHeader","send","uploadWorkouts","sync","loginUrl","uploadUrl","email","password","setItem","parse","response","describe","jasmine","getEnv","randomizeTests","beforeEach","done","xmlhttp","waypoints","responseText","driverFactory","buildHardwareDriver","runWorkout","doneCallback","delay","repeat","it","expect","toBeTruthy","pauseListener","toEqual","removeEventListener","_js_model_drivers_app_drivers_platform__WEBPACK_IMPORTED_MODULE_0__","_js_model_drivers_app_driver_factory__WEBPACK_IMPORTED_MODULE_1__","_js_model_drivers_tizen_app_drivers_tizen_hardware__WEBPACK_IMPORTED_MODULE_1__","_js_model_drivers_android_app_drivers_android_hardware__WEBPACK_IMPORTED_MODULE_2__","_js_model_drivers_tizen_app_drivers_tizen_battery__WEBPACK_IMPORTED_MODULE_3__","_js_model_drivers_android_app_drivers_android_battery__WEBPACK_IMPORTED_MODULE_4__","_js_model_drivers_tizen_app_drivers_tizen_network__WEBPACK_IMPORTED_MODULE_5__","_js_model_drivers_android_app_drivers_android_network__WEBPACK_IMPORTED_MODULE_6__","_js_model_drivers_app_driver_factory__WEBPACK_IMPORTED_MODULE_7__","buildBatteryDriver","buildNetworkDriver","_src_js_workout_app_workout_cycling_workout_js__WEBPACK_IMPORTED_MODULE_0__","_src_js_workout_app_workout_running_workout__WEBPACK_IMPORTED_MODULE_1__","timeA","speed","pace"],"mappings":"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","file":"/www/tests/test.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 32);\n","const PLATFORMS = {\n    TIZEN: 'tizen',\n    ANDROID: 'android',\n    BROWSER: 'browser'\n};\n\nclass Platform {\n    static get() {\n        var platform = PLATFORMS.BROWSER;\n\n        if (typeof tizen === 'object' && typeof tizen.systeminfo === 'object') {\n            platform = PLATFORMS.TIZEN;\n        } else if (typeof device === 'object' && device.platform === 'Android') {\n            platform = PLATFORMS.ANDROID;\n        }\n\n        return platform;\n    }\n}\n\nexport {Platform, PLATFORMS};","require('./app.workout.point');\nrequire('../common/app.common.calculations');\n\nvar WORKOUT_STATUS_UNSAVED = 0,\n    WORKOUT_STATUS_SAVED = 1,\n\n    WORKOUT_STATE_STOPPED = 0,\n    WORKOUT_STATE_RUNNING = 1,\n    WORKOUT_STATE_PAUSED = 2,\n    WORKOUT_STATE_AUTOPAUSED = 3;\n\nexport const WORKOUT_TYPE_RUNNING = 1;\nexport const WORKOUT_TYPE_CYCLING = 2;\n\n/**\n * @class BaseWorkout\n * @constructor\n */\nclass BaseWorkout {\n\n    constructor() {\n        this.type = null;\n        this.status = WORKOUT_STATUS_UNSAVED;\n\n        /** @member {Point[]} **/\n        this._points = [];\n        this._distance = 0;\n\n        this._segmentIndex = 0;\n        this._state = WORKOUT_STATE_STOPPED;\n    }\n\n    init() {\n    }\n\n    start() {\n        this._state = WORKOUT_STATE_RUNNING;\n    }\n\n    pause() {\n        this._state = WORKOUT_STATE_PAUSED;\n        this._segmentIndex++;\n    }\n\n    save() {\n        this.status = WORKOUT_STATUS_SAVED;\n    }\n\n    resume() {\n        this._state = WORKOUT_STATE_RUNNING;\n    }\n\n    /**\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._state === WORKOUT_STATE_RUNNING;\n    }\n\n    /**\n     *\n     * @param {Point} point\n     */\n    addPoint(point) {\n        point.segment_index = this._segmentIndex;\n\n        this._points.push(point);\n\n        let points = this._getCalculationPoints();\n\n        if(points){\n            this.calculate(points.pointA, points.pointB);\n        }\n\n    }\n\n    /**\n     *\n     * @private\n     *\n     * @returns {?{pointA: Point, pointB: Point}}\n     */\n    _getCalculationPoints(){\n        let calculationPoints = null;\n\n        if(this._points.length >= 2){\n            calculationPoints =  {\n                pointA: this._points[this._points.length - 2],\n                pointB: this._points[this._points.length - 1]\n            }\n        }\n\n        return calculationPoints;\n\n    }\n\n    /**\n     *\n     * @param {Point} pointA\n     * @param {Point} pointB\n     * @returns {number}\n     */\n    _calculateDistance(pointA, pointB) {\n        let distance = window.app.common.calculations.calculateDistance(\n            {latitude: pointA.lat, longitude: pointA.lng},\n            {latitude: pointB.lat, longitude: pointB.lng}\n        );\n\n        this._distance += distance.raw;\n\n        return distance.raw;\n    }\n\n    /**\n     * Calculate the params such as distance, speed, etc\n     *\n     * @param {Point} pointA\n     * @param {Point} pointB\n     */\n    calculate(pointA, pointB){\n\n    }\n\n    /**\n     *\n     * @returns {string}\n     */\n    get speedUnit(){\n        return 'km/h';\n    }\n\n    /**\n     *\n     * @returns {string}\n     */\n    get speedLabel(){\n        return 'Speed'\n    }\n\n    /**\n     *\n     * @returns {number}\n     */\n    get speed(){\n        return 0;\n    }\n\n    /**\n     *\n     * @returns {number}\n     */\n    get distance(){\n        return this._distance / 1000;\n    }\n\n    /**\n     *\n     * @param {number} distance\n     */\n    set distance(distance){\n        this._distance = distance;\n    }\n\n    /**\n     *\n     * @returns {Point[]}\n     */\n    get points(){\n        return this._points;\n    }\n\n    /**\n     *\n     * @returns {int|number}\n     */\n    get heartRate(){\n        return this._points.length ? this._points[this._points.length - 1].heart_rate : 0;\n    }\n\n    /**\n     *\n     * @returns {number}\n     */\n    get altitude(){\n        return this._points.length ? this._points[this._points.length - 1].elevation : 0;\n    }\n\n    /**\n     *\n     * @returns {{type: int, status: int, points: Point[]}}\n     */\n    toObject() {\n        return {\n            type: this.type,\n            status: this.status,\n            points: this._points\n        }\n    }\n};\n\nexport {BaseWorkout};\n","class HardwareDriver {\n    constructor() {\n        this.commonEvents = window.app.common.events;\n    }\n\n    init() {\n        this.bind();\n    }\n\n    bind() {\n\n    }\n\n    /**\n     *\n     * @returns {boolean}\n     */\n    isHeartRateAvailable() {\n        return false;\n    }\n\n    backgroundRunEnable() {\n\n    }\n\n    backgroundRunDisable() {\n\n    }\n\n    exit() {\n\n    }\n}\n\nexport {HardwareDriver}\n\n","class BatteryDriver {\n    constructor() {\n        this.level = null;\n        this.commonEvents = window.app.common.events;\n    }\n\n    init() {\n        this.bind();\n    }\n\n    bind() {\n\n    }\n}\n\nexport {BatteryDriver}","const NETWORKS = ['2G', '2.5G', '3G', '4G', 'WIFI', 'ETHERNET', 'UNKNOWN'];\n\nclass NetworkDriver {\n    constructor() {\n        this.commonEvents = window.app.common.events;\n        this.networkType = 'NONE';\n    }\n\n    init() {\n        this.bind();\n    }\n\n    bind() {\n\n    }\n\n    isNetworkAvailable() {\n        return NETWORKS.indexOf(this.networkType) !== -1;\n    }\n\n    getNetworkType() {\n        return this.networkType;\n    }\n}\n\nexport {NetworkDriver}\n","import {PLATFORMS} from \"./app.drivers.platform\";\n\nimport {HardwareDriver} from \"./app.drivers.hardware\";\nimport {HardwareDriverTizen} from \"./tizen/app.drivers.tizen.hardware\";\nimport {HardwareDriverAndroid} from \"./android/app.drivers.android.hardware\";\n\nimport {BatteryDriver} from \"./app.drivers.battery\";\nimport {BatteryDriverTizen} from \"./tizen/app.drivers.tizen.battery\";\nimport {BatteryDriverAndroid} from \"./android/app.drivers.android.battery\";\n\nimport {NetworkDriver} from \"./app.drivers.network\";\nimport {NetworkDriverTizen} from \"./tizen/app.drivers.tizen.network\";\nimport {NetworkDriverAndroid} from \"./android/app.drivers.android.network\";\n\nclass DriverFactory {\n    constructor(platform) {\n        this.platform = platform;\n    }\n\n    buildNetworkDriver() {\n        var networkDriver = new NetworkDriver();\n\n        switch (this.platform) {\n            case PLATFORMS.TIZEN:\n                networkDriver = new NetworkDriverTizen();\n                break;\n            case PLATFORMS.ANDROID:\n                networkDriver = new NetworkDriverAndroid();\n                break;\n        }\n\n        return networkDriver;\n    }\n\n\n    buildBatteryDriver() {\n        var batteryDriver = new BatteryDriver();\n\n        switch (this.platform) {\n            case PLATFORMS.TIZEN:\n                batteryDriver = new BatteryDriverTizen();\n                break;\n            case PLATFORMS.ANDROID:\n                batteryDriver = new BatteryDriverAndroid();\n                break;\n        }\n\n        return batteryDriver;\n    }\n\n    buildHardwareDriver() {\n        var hardwareDriver = new HardwareDriver();\n\n        switch (this.platform) {\n            case PLATFORMS.TIZEN:\n                hardwareDriver = new HardwareDriverTizen();\n                break;\n            case PLATFORMS.ANDROID:\n                hardwareDriver = new HardwareDriverAndroid();\n                break;\n        }\n\n        return hardwareDriver;\n    }\n}\n\nexport {DriverFactory}","import {BaseWorkout, WORKOUT_TYPE_CYCLING} from \"./app.workout.base_workout\";\n\n// Milliseconds per meter to kilometers per hour\nconst MPS_TO_KMH = 3600; // hour = 3600 * 1000 milliseconds / kilometer = 1000 meters\n\nclass CyclingWorkout extends BaseWorkout {\n    constructor() {\n        super();\n\n        this.type = WORKOUT_TYPE_CYCLING;\n\n        this._speed = 0;\n    }\n\n    /**\n     *\n     * @param {Point} pointA\n     * @param {Point} pointB\n     * @returns {number}\n     */\n    _calculateSpeed(pointA, pointB) {\n        let distance = this._calculateDistance(pointA, pointB),\n            timeDiff = pointB.time - pointA.time;\n\n        if (distance > 0.5 && timeDiff > 0) {\n            this._speed = timeDiff ? MPS_TO_KMH * distance / timeDiff : 0;\n        } else {\n            this._speed = 0;\n        }\n\n        return this._speed;\n    }\n\n    /**\n     * Calculate the params such as distance, speed, etc\n     *\n     * @param {Point} pointA\n     * @param {Point} pointB\n     */\n    calculate(pointA, pointB) {\n        this._calculateSpeed(pointA, pointB);\n    }\n\n    /**\n     *\n     * @returns {number}\n     */\n    get speed() {\n        return this._speed;\n    }\n}\n\nexport {CyclingWorkout}","import {BaseWorkout, WORKOUT_TYPE_RUNNING} from \"./app.workout.base_workout\";\n\n// Milliseconds per meter to minutes per kilometer\nconst MSEC_PER_METER_TO_MIN_PER_KM = 60;// Minute = 60 * 1000  millisecond / kilometer = 1000 meters\n\n\nclass RunningWorkout extends BaseWorkout {\n    constructor() {\n        super();\n\n        this.type = WORKOUT_TYPE_RUNNING;\n\n        this._pace = 0;\n    }\n\n    /**\n     *\n     * @param {Point} pointA\n     * @param {Point} pointB\n     * @returns {number}\n     */\n    _calculatePace(pointA, pointB) {\n        let distance = this._calculateDistance(pointA, pointB),\n            timeDiff = pointB.time - pointA.time;\n\n        if (distance > 0.5 && timeDiff > 0) {\n            this._pace = (timeDiff / distance) / MSEC_PER_METER_TO_MIN_PER_KM;\n        } else {\n            this._speed = 0;\n        }\n        return this._pace;\n    }\n\n    /**\n     * Calculate the params such as distance, speed, etc\n     *\n     * @param {Point} pointA\n     * @param {Point} pointB\n     */\n    calculate(pointA, pointB) {\n        this._calculatePace(pointA, pointB);\n    }\n\n    /**\n     *\n     * @returns {string}\n     */\n    get speedUnit() {\n        return 'min/km';\n    }\n\n    /**\n     *\n     * @returns {string}\n     */\n    get speedLabel() {\n        return 'Pace'\n    }\n\n    /**\n     *\n     * @returns {number}\n     */\n    get speed() {\n        return this._pace;\n    }\n}\n\nexport {RunningWorkout};","import {HardwareDriver} from \"../app.drivers.hardware\";\n\nclass HardwareDriverTizen extends HardwareDriver {\n    constructor() {\n        super();\n        this.commonEvents = window.app.common.events;\n    }\n\n    bind() {\n\n    }\n\n    isHeartRateAvailable() {\n        return true;\n    }\n\n    backgroundRunEnable() {\n        tizen.power.request(\"CPU\", \"CPU_AWAKE\");\n        tizen.power.request('SCREEN', 'SCREEN_NORMAL');\n    }\n\n    backgroundRunDisable() {\n        tizen.power.release(\"CPU\");\n        tizen.power.release('SCREEN');\n    }\n\n    exit() {\n        try {\n            tizen.application.getCurrentApplication().exit();\n        } catch (error) {\n            console.warn('Application exit failed.', error.message);\n        }\n    };\n}\n\nexport {HardwareDriverTizen}\n","import {HardwareDriver} from \"../app.drivers.hardware\";\n\nclass HardwareDriverAndroid extends HardwareDriver {\n    constructor() {\n        super();\n        this.commonEvents = window.app.common.events;\n    }\n\n    bind() {\n        cordova.plugins.backgroundMode.on('activate', function () {\n            console.log('activate background mode');\n            cordova.plugins.backgroundMode.disableWebViewOptimizations();\n        });\n    }\n\n    isHeartRateAvailable() {\n        return false;\n    }\n\n    backgroundRunEnable() {\n        cordova.plugins.backgroundMode.enable();\n    }\n\n    backgroundRunDisable() {\n        cordova.plugins.backgroundMode.disable();\n    }\n\n    exit() {\n        try {\n            navigator.app.exitApp();\n        } catch (error) {\n            console.warn('Application exit failed.', error.message);\n        }\n    }\n}\n\nexport {HardwareDriverAndroid}","import {BatteryDriver} from \"../app.drivers.battery\";\n\nclass BatteryDriverTizen extends BatteryDriver {\n    bind() {\n        var _this = this,\n            systeminfo = null;\n\n        if (typeof tizen === 'object' && typeof tizen.systeminfo === 'object') {\n            var systeminfo = tizen.systeminfo;\n        } else {\n            console.warn('tizen.systeminfo not available');\n        }\n        try {\n            systeminfo.addPropertyValueChangeListener(\n                'BATTERY',\n                function change(battery) {\n                    _this.level = battery.level;\n\n                    if (!battery.isCharging && battery.level < _this.LOW_BATTERY) {\n                        _this.commonEvents.dispatchEvent('model.battery.low');\n                    }\n                },\n                null,\n                function errorCallback(error) {\n                    console.warn('Battery state listener was not set.', error);\n                }\n            );\n        } catch (error) {\n            console.warn('Battery state listener was not set.', error);\n        }\n    }\n}\n\nexport {BatteryDriverTizen}\n\n","import {BatteryDriver} from \"../app.drivers.battery\";\n\nclass BatteryDriverAndroid extends BatteryDriver {\n    constructor() {\n        super();\n    }\n\n    bind() {\n        var _this = this;\n\n        document.addEventListener(\"deviceready\", function () {\n            window.addEventListener(\"batterystatus\", onBatteryStatus, false);\n\n            function onBatteryStatus(status) {\n                _this.level = status.level;\n            }\n\n            window.addEventListener(\"batterylow\", onBatteryLow, false);\n\n            function onBatteryLow(status) {\n                _this.commonEvents.dispatchEvent('model.battery.low');\n            }\n        }, false);\n    }\n}\n\nexport {BatteryDriverAndroid}","import {NetworkDriver} from \"../app.drivers.network\";\n\nclass NetworkDriverTizen extends NetworkDriver {\n    constructor() {\n        super();\n    }\n\n    bind() {\n        var _this = this,\n            systeminfo = null;\n\n        if (typeof tizen === 'object' && typeof tizen.systeminfo === 'object') {\n            var systeminfo = tizen.systeminfo;\n        } else {\n            console.warn('tizen.systeminfo not available');\n        }\n\n        try {\n            systeminfo.getPropertyValue(\n                'NETWORK',\n                function (network) {\n                    _this.onGetNetworkTypeSuccess(network);\n                },\n                function onGetPropertyValueError(error) {\n                    console.warn('Couldn\\'t get network type value.', error);\n                }\n            );\n        } catch (error) {\n            console.warn('Couldn\\'t get network type value.', error);\n        }\n\n        try {\n            systeminfo.addPropertyValueChangeListener(\n                'NETWORK',\n                function (network) {\n                    _this.onNetworkTypeChange(network);\n                }\n            );\n        } catch (error) {\n            console.warn('Network change listener was not set.', error);\n        }\n\n    }\n\n    onNetworkTypeChange(network) {\n        this.networkType = network.networkType;\n        this.commonEvents.dispatchEvent('model.network.type.changed');\n    }\n\n    onGetNetworkTypeSuccess(network) {\n        this.networkType = network.networkType;\n        this.commonEvents.dispatchEvent('model.network.initialized');\n    }\n\n}\n\nexport {NetworkDriverTizen}","import {NetworkDriver} from \"../app.drivers.network\";\n\nclass NetworkDriverAndroid extends NetworkDriver {\n    constructor() {\n        super();\n    }\n\n    bind() {\n        var _this = this;\n\n        document.addEventListener(\"offline\",\n            function () {\n                _this.onNetworkTypeChange()\n            }, false);\n        document.addEventListener(\"online\",\n            function () {\n                _this.onNetworkTypeChange()\n            }, false);\n\n        setTimeout(\n            function () {\n                _this.onGetNetworkTypeSuccess();\n            },\n            500);\n\n    }\n\n    isNetworkAvailable() {\n        return navigator.connection.type !== Connection.NONE;\n    }\n\n    onNetworkTypeChange() {\n        this.networkType = navigator.connection.type;\n        this.commonEvents.dispatchEvent('model.network.type.changed');\n    }\n\n    onGetNetworkTypeSuccess() {\n        this.networkType = navigator.connection.type;\n        this.commonEvents.dispatchEvent('model.network.initialized');\n    }\n}\n\nexport {NetworkDriverAndroid}\n","/*\n * Copyright (c) 2015 Samsung Electronics Co., Ltd. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* global window*/\n\n/**\n * Application common calculations module.\n * Provides methods that are necessary for navigation.\n *\n * @module app.common.calculations\n * @namespace app.common.calculations\n * @memberof app.common\n */\n\n// make sure that \"app\" namespace is created\nwindow.app = window.app || {};\n\n// strict mode wrapper function\n(function defineAppCommonCalculations(app) {\n    'use strict';\n\n    /**\n     * Earth radius constant.\n     *\n     * @private\n     * @const {number}\n     */\n    var EARTH_RADIUS = 6371000,\n\n    /**\n     * Meters unit constant.\n     *\n     * @private\n     * @const {string}\n     */\n    METERS_UNIT = 'm',\n\n    /**\n     * Kilometers unit constant.\n     *\n     * @private\n     * @const {string}\n     */\n    KILOMETERS_UNIT = 'km',\n\n    /**\n     * Calculations module reference.\n     *\n     * @memberof app.common.calculations\n     * @private\n     * @type {object}\n     */\n    calculations = null;\n\n    // create namespace for the module\n    app.common = app.common || {};\n    app.common.calculations = app.common.calculations || {};\n    calculations = app.common.calculations;\n\n    /**\n     * Converts the number value expressed in radians to degrees.\n     *\n     * @private\n     * @param {number} value\n     * @returns {number}\n     */\n    function toDegrees(value) {\n        return value * 180 / Math.PI;\n    }\n\n    /**\n     * Converts the number value expressed in degrees to radians.\n     *\n     * @private\n     * @param {number} value\n     * @returns {number}\n     */\n    function toRadians(value) {\n        return value * Math.PI / 180;\n    }\n\n    /**\n     * Formats distance value to be displayed in meters or kilometers.\n     *\n     * @private\n     * @param {number} distance Distance in meters.\n     * @returns {number}\n     */\n    function formatDistance(distance) {\n        if (distance >= 1000) {\n            distance /= 1000;\n        }\n        return distance.toFixed(0);\n    }\n\n    /**\n     * Formats unit value to represent meters or kilometers.\n     *\n     * @private\n     * @param {number} distance Distance in meters.\n     * @returns {string}\n     */\n    function formatUnit(distance) {\n        if (distance >= 1000) {\n            return KILOMETERS_UNIT;\n        }\n        return METERS_UNIT;\n    }\n\n    /**\n     * Calculates the angle based on the start and destination position.\n     *\n     * @memberof app.common.calculations\n     * @public\n     * @param {object} start\n     * @param {number} start.latitude\n     * @param {number} start.longitude\n     * @param {object} destination\n     * @param {number} destination.latitude\n     * @param {number} destination.longitude\n     * @returns {number}\n     */\n    calculations.calculateAngle = function calculateAngle(start, destination) {\n        var sLon = toRadians(start.longitude),\n            dLon = toRadians(destination.longitude),\n            sLat = toRadians(start.latitude),\n            dLat = toRadians(destination.latitude),\n            deltaLon = dLon - sLon;\n\n        if (deltaLon > Math.PI) {\n            deltaLon -= 2 * Math.PI;\n        } else if (deltaLon < -Math.PI) {\n            deltaLon += 2 * Math.PI;\n        }\n\n        return toDegrees((Math.atan2(\n            deltaLon,\n            Math.log(\n                Math.tan(dLat / 2 + Math.PI / 4) /\n                Math.tan(sLat / 2 + Math.PI / 4)\n            )\n        )));\n    };\n\n    /**\n     * Calculates the distance between two positions\n     * based on its coordinates.\n     *\n     * @memberof app.common.calculations\n     * @public\n     * @see http://www.sunearthtools.com/tools/distance.php\n     * @param {object} start\n     * @param {number} start.latitude\n     * @param {number} start.longitude\n     * @param {object} destination\n     * @param {number} destination.latitude\n     * @param {number} destination.longitude\n     * @returns {number}\n     */\n    calculations.calculateDistance =\n            function calculateDistance(start, destination) {\n        var sLon = toRadians(start.longitude),\n            dLon = toRadians(destination.longitude),\n            sLat = toRadians(start.latitude),\n            dLat = toRadians(destination.latitude),\n            distance = EARTH_RADIUS *\n                Math.acos(\n                    Math.sin(sLat) * Math.sin(dLat) +\n                    Math.cos(sLat) * Math.cos(dLat) * Math.cos(dLon - sLon)\n                );\n\n        return {\n            raw: distance,\n            formatted: formatDistance(distance),\n            unit: formatUnit(distance)\n        };\n    };\n\n    /**\n     * Obtains angle from rotation.\n     *\n     * @memberof app.common.calculations\n     * @param {number} value\n     * @returns {number}\n     */\n    calculations.angleFromRotation = function angleFromRotation(value) {\n        var angle = -value % 360;\n\n        if (angle < 0) {\n            angle += 360;\n        }\n\n        return angle;\n    };\n\n    /**\n     * Calculates angle for navigation path indicator.\n     *\n     * @memberof app.common.calculations\n     * @param {number} partialPath\n     * @param {number} totalPath\n     * @param {number} totalAngle\n     * @returns {number}\n     */\n    calculations.calculatePathAngle =\n        function calculatePathAngle(partialPath, totalPath, totalAngle) {\n\n        return partialPath * totalAngle / totalPath;\n    };\n\n})(window.app);\n","require('../common/app.common.events');\n\nrequire('./app.model.battery');\nrequire('./app.model.network');\nrequire('./app.model.geolocation');\nrequire('./app.model.workout');\nrequire('./app.model.sync');","/*\n * Copyright (c) 2015 Samsung Electronics Co., Ltd. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* global window*/\n\n/**\n * Application common events module.\n * Provides common methods related to events triggering.\n *\n * @module app.common.events\n * @namespace app.common.events\n * @memberof app.common\n */\n\n// make sure that \"app\" namespace is created\nwindow.app = window.app || {};\n\n// strict mode wrapper function\n(function defineAppCommonEvents(app) {\n    'use strict';\n\n    /**\n     * Events module reference.\n     *\n     * @memberof app.common\n     * @private\n     * @type {object}\n     */\n    var events = null;\n\n    // create namespace for the module\n    app.common = app.common || {};\n    app.common.events = app.common.events || {};\n    events = app.common.events;\n\n    /**\n     * Dispatches an event.\n     *\n     * @memberof app.common.events\n     * @public\n     * @param {string} eventName Event name.\n     * @param {*} data Detailed data.\n     */\n    events.dispatchEvent = function dispatchEvent(eventName, data) {\n        var customEvent = new window.CustomEvent(eventName, {\n            detail: data\n        });\n\n        window.dispatchEvent(customEvent);\n    };\n\n})(window.app);\n","/*\n * Copyright (c) 2015 Samsung Electronics Co., Ltd. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*global console, window, tizen*/\n\n/**\n * Application battery model module.\n * It is responsible for obtaining information about device battery state.\n *\n * @module app.model.battery\n * @requires {@link app.common.events}\n * @namespace app.model.battery\n * @memberof app.model\n */\n\n// make sure that \"app\" namespace is created\nwindow.app = window.app || {};\n\n(function defineAppModelBattery(app) {\n    'use strict';\n\n        /**\n         * Battery model module reference.\n         *\n         * @private\n         * @type {object}\n         */\n        var modelBattery = null,\n\n        /**\n         * Common events module reference.\n         *\n         * @private\n         * @type {object}\n         */\n        commonEvents = app.common.events,\n\n        driver = null;\n\n    // create namespace for the module\n    app.model = app.model || {};\n    app.model.battery = app.model.battery || {};\n    modelBattery = app.model.battery;\n\n    /**\n     * Initializes the battery model module.\n     *\n     * @memberof app.model.battery\n     * @public\n     */\n    modelBattery.init = function init(driver) {\n        driver = driver;\n        driver.init();\n    };\n\n})(window.app);\n","/*\n * Copyright (c) 2015 Samsung Electronics Co., Ltd. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*global window, console, tizen*/\n\n/**\n * Application network model module.\n * It is responsible for providing information about user location.\n *\n * @module app.model.network\n * @requires {@link app.common.events}\n * @namespace app.model.network\n * @memberof app.model\n */\n\n// make sure that \"app\" namespace is created\nwindow.app = window.app || {};\n\n(function defineAppModelNetwork(app) {\n    'use strict';\n\n        /**\n         * Common events module reference.\n         *\n         * @private\n         * @type {object}\n         */\n        var commonEvents = app.common.events,\n\n        modelNetwork = null;\n\n    // create namespace for the module\n    app.model = app.model || {};\n    app.model.network = app.model.network || {};\n    modelNetwork = app.model.network;\n    modelNetwork.driver = null;\n\n\n    /**\n     * Checks available network type.\n     *\n     * @private\n     */\n    function checkNetworkType() {\n        return modelNetwork.driver.checkNetworkType();\n    }\n\n    /**\n     * Checks whether the network type has different value than 'NONE'.\n     *\n     * @memberof app.model.network\n     * @public\n     * @returns {boolean}\n     */\n    modelNetwork.isNetworkAvailable = function isNetworkAvailable() {\n        return modelNetwork.driver.isNetworkAvailable();\n    };\n\n    /**\n     * Returns available network type;\n     *\n     * @memberof app.model.network\n     * @public\n     * @returns {string}\n     */\n    modelNetwork.getNetworkType = function getNetworkType() {\n        return modelNetwork.driver.getNetworkType();\n    };\n\n    /**\n     * Initializes the network model module.\n     *\n     * @memberof app.model.network\n     * @public\n     */\n    modelNetwork.init = function init(driver) {\n        modelNetwork.driver = driver;\n        modelNetwork.driver.init();\n    };\n\n})(window.app);\n","/*\n * Copyright (c) 2015 Samsung Electronics Co., Ltd. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*global window, console, navigator, setTimeout*/\n\n/**\n * Application geolocation model module.\n * It is responsible for providing information about user location.\n *\n * @module app.model.geolocation\n * @requires {@link app.common.events}\n * @requires {@link app.common.calculations}\n * @namespace app.model.geolocation\n * @memberof app.model\n */\n\n// make sure that \"app\" namespace is created\nwindow.app = window.app || {};\n\n(function defineAppModelGeolocation(app) {\n    'use strict';\n\n    /**\n     * Geolocation checking interval (in milliseconds).\n     *\n     * @private\n     * @const {number}\n     */\n    var GEO_CHECKING_INTERVAL = 1000,\n\n        /**\n         * Geolocation checking counter.\n         * Defines max number of checking interval occurrences.\n         *\n         * @private\n         * @const {number}\n         */\n        GEO_CHECKING_COUNTER = 5,\n\n        /**\n         * Geolocation model module reference.\n         *\n         * @private\n         * @type {object}\n         */\n        modelGeolocation = null,\n\n        /**\n         * Common events module reference.\n         *\n         * @private\n         * @type {object}\n         */\n        commonEvents = app.common.events,\n\n        /**\n         * Common calculations module reference.\n         *\n         * @private\n         * @type {object}\n         */\n        commonCalculations = app.common.calculations,\n\n        /**\n         * Geolocation API object.\n         *\n         * @private\n         * @type {object}\n         */\n        geolocation = null,\n\n        /**\n         * Current position data.\n         *\n         * @private\n         * @type {Position}\n         */\n        currentPosition = null,\n\n        /**\n         * Stores information about number of checking interval occurrences.\n         *\n         * @private\n         * @type {number}\n         */\n        checkingCounter = 0;\n\n    // create namespace for the module\n    app.model = app.model || {};\n    app.model.geolocation = app.model.geolocation || {};\n    modelGeolocation = app.model.geolocation;\n\n    /**\n     * Checks if the current position is equal to the one given as parameter.\n     * Returns true if it is, false otherwise.\n     *\n     * @param {Position} position\n     * @returns {boolean}\n     */\n    function isPositionEqual(position) {\n        if (currentPosition &&\n            (currentPosition.coords.latitude === position.coords.latitude ||\n            currentPosition.coords.longitude === position.coords.longitude)) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Performs action on get current position success.\n     *\n     * @private\n     * @param {Position} position\n     * @fires model.geolocation.current.position.changed\n     * @fires model.geolocation.current.destination.reached\n     * @fires model.geolocation.position.available\n     */\n    function onGetCurrentPositionSuccess(position) {\n        if (!isPositionEqual(position)) {\n            currentPosition = position;\n            commonEvents.dispatchEvent(\n                'model.geolocation.current.position.changed'\n            );\n        }\n        commonEvents.dispatchEvent('model.geolocation.position.available');\n        checkingCounter = 0;\n        //setTimeout(getGeoPosition, GEO_CHECKING_INTERVAL);\n    }\n\n    /**\n     * Performs action on get current position error.\n     *\n     * @private\n     * @fires model.geolocation.position.unavailable\n     * @fires model.geolocation.position.lost\n     */\n    function onGetCurrentPositionError(error) {\n        commonEvents.dispatchEvent('model.geolocation.position.unavailable');\n        checkingCounter += 1;\n        if (checkingCounter === GEO_CHECKING_COUNTER) {\n            commonEvents.dispatchEvent('model.geolocation.position.lost');\n        }\n\n        console.warn(error);\n        //setTimeout(getGeoPosition, GEO_CHECKING_INTERVAL);\n    }\n\n    /**\n     * Uses Geolocation API in order to obtain information\n     * about changes of the current position.\n     *\n     * @private\n     */\n    function getGeoPosition() {\n        try {\n            geolocation.watchPosition(\n                onGetCurrentPositionSuccess,\n                onGetCurrentPositionError,\n                {\n                    maximumAge :GEO_CHECKING_INTERVAL,\n                    enableHighAccuracy: true,\n                    timeout: GEO_CHECKING_INTERVAL\n                }\n            );\n        } catch (error) {\n            console.warn('Couldn\\'t get geolocation position.', error);\n        }\n    }\n\n    /**\n     * Returns current position.\n     *\n     * @memberof app.model.geolocation\n     * @public\n     * @returns {object}\n     */\n    modelGeolocation.getCurrentPosition = function getCurrentPosition() {\n        return currentPosition;\n    };\n\n\n    /**\n     * Initializes the geolocation model module.\n     *\n     * @memberof app.model.geolocation\n     * @public\n     * @fires model.geolocation.available\n     * @fires model.geolocation.unavailable\n     */\n    modelGeolocation.init = function init() {\n        if (navigator.geolocation) {\n            geolocation = navigator.geolocation;\n            commonEvents.dispatchEvent('model.geolocation.available');\n            getGeoPosition();\n        } else {\n            commonEvents.dispatchEvent('model.geolocation.unavailable');\n        }\n    };\n\n})(window.app);\n","import {CyclingWorkout} from \"../workout/app.workout.cycling_workout\";\nimport {RunningWorkout} from \"../workout/app.workout.running_workout\";\nimport {WORKOUT_TYPE_CYCLING, WORKOUT_TYPE_RUNNING} from \"../workout/app.workout.base_workout\";\nlet IDBStore = require( \"../../../node_modules/idb-wrapper/idbstore\");\n\nrequire('../common/app.common.calculations');\n/*global window, console, geolocation, setTimeout*/\n\n/**\n * Application geolocation model module.\n * It is responsible for providing information about user location.\n *\n * @module app.model.geolocation\n * @requires {@link app.common.events}\n * @requires {@link app.common.calculations}\n * @namespace app.model.geolocation\n * @memberof app.model\n */\n\n// make sure that \"app\" namespace is created\nwindow.app = window.app || {};\n\n(function defineAppModelWorkout(app) {\n    'use strict';\n\n    /**\n     * Geolocation checking interval (in milliseconds).\n     *\n     * @private\n     * @const {number}\n     */\n\n        /**\n         * Workout model module reference.\n         *\n         * @private\n         * @type {object}\n         */\n        var modelWorkout = null,\n\n        /**\n         * Geolocation model module reference.\n         *\n         * @private\n         * @type {object}\n         */\n        modelGeolocation = app.model.geolocation,\n\n        /**\n         * Common events module reference.\n         *\n         * @private\n         * @type {object}\n         */\n        commonEvents = app.common.events,\n\n        /**\n         *\n         * @type {HardwareDriver}\n         */\n        hardwareDriver = null,\n\n        /**\n         * Workout data.\n         *\n         * @private\n         * @type {BaseWorkout}\n         */\n        workout = null,\n\n        workoutDB = null,\n\n        isDBready = false;\n\n    // create namespace for the module\n    app.model = app.model || {};\n    app.model.workout = app.model.workout || {};\n    modelWorkout = app.model.workout;\n\n    modelWorkout.WORKOUT_TYPE_RUNNING = 1;\n    modelWorkout.WORKOUT_TYPE_CYCLING = 2;\n\n    modelWorkout.WORKOUT_STATUS_UNSAVED = 0;\n    modelWorkout.WORKOUT_STATUS_SAVED = 1;\n    modelWorkout.WORKOUT_STATUS_SYNCED = 2;\n\n\n    /**\n     * Handles model.geolocation.position.available event.\n     *\n     * @private\n     * @fires model.workout.updateui\n     */\n    function updateUI(){\n        if(workout){\n            commonEvents.dispatchEvent('model.workout.updateui', workout);\n        }\n    }\n\n    /**\n     * Handles model.geolocation.position.available event.\n     *\n     * @private\n     */\n    function onModelGeolocationPositionAvailable() {\n        var currentPosition = modelGeolocation.getCurrentPosition();\n\n        if(workout && workout.isActive()){\n            var point = new Point(\n                0,\n                currentPosition.coords.latitude,\n                currentPosition.coords.longitude,\n                0,\n                currentPosition.coords.altitude || 0,\n                currentPosition.timestamp\n            );\n\n            workout.addPoint(point);\n            updateUI();\n        }\n    }\n\n    /**\n     * Registers event listeners.\n     *\n     * @private\n     */\n    function bindEvents() {\n        window.addEventListener(\n            'model.geolocation.position.available',\n            onModelGeolocationPositionAvailable\n        );\n    }\n\n    function initDatabase() {\n        workoutDB = new IDBStore({\n            dbVersion: 1,\n            storeName: 'workouts',\n            keyPath: 'id',\n            autoIncrement: true,\n            onStoreReady: function(){\n                commonEvents.dispatchEvent('model.workout.dbready');\n                isDBready = true;\n\n            }\n        });\n    }\n    /**\n     * Initializes the workout model module.\n     *\n     * @memberof app.model.workout\n     * @public\n     * @fires model.geolocation.available\n     * @fires model.geolocation.unavailable\n     */\n    modelWorkout.init = function init(driver) {\n        hardwareDriver = driver;\n        hardwareDriver.init();\n        bindEvents();\n        initDatabase();\n    };\n\n    modelWorkout.start = function start(type) {\n        switch(type){\n            case WORKOUT_TYPE_CYCLING:\n                workout = new CyclingWorkout();\n                break;\n            case WORKOUT_TYPE_RUNNING:\n                workout = new RunningWorkout();\n                break;\n        }\n\n        workout.start();\n        updateUI();\n        hardwareDriver.backgroundRunEnable();\n    };\n\n    /**\n     *\n     * @fires model.workout.paused\n     */\n    modelWorkout.togglePause = function togglePause(){\n        if(!workout.isActive()){\n            hardwareDriver.backgroundRunEnable();\n            commonEvents.dispatchEvent('model.workout.resumed');\n            workout.resume();\n        }\n        else{\n            commonEvents.dispatchEvent('model.workout.paused');\n            workout.pause();\n            hardwareDriver.backgroundRunDisable();\n        }\n    };\n\n    /**\n     *\n     * @returns {boolean}\n     */\n    modelWorkout.isHeartRateAvailable = function(){\n        return hardwareDriver.isHeartRateAvailable();\n    };\n\n    modelWorkout.save = function save(){\n        workout.save();\n\n        var onsuccess = function(id){\n            console.log('Successfully inserted! insertId is: ' + id);\n            commonEvents.dispatchEvent('model.workout.save.successful', true);\n        };\n        var onerror = function(error){\n            console.log('Workout save failed!', error);\n            commonEvents.dispatchEvent('model.workout.save.failed');\n        };\n\n        workoutDB.put(workout.toObject(), onsuccess, onerror);\n\n        return false;\n    };\n\n    modelWorkout.clear = function clear(){\n        var onsuccess = function () {\n            console.log('Database celared');\n            commonEvents.dispatchEvent('model.workout.clear.successful');\n        };\n        var onerror = function (error) {\n            console.log('Database clear failed!', error);\n            commonEvents.dispatchEvent('model.workout.clear.failed');\n        };\n\n        workoutDB.clear(onsuccess, onerror);\n    };\n\n    modelWorkout.getList = function getList( status ) {\n        var onsuccess = function (data) {\n            data = data.filter(function(item){\n                return item.status == status;\n            });\n\n            commonEvents.dispatchEvent('model.workout.getlist.successful', data);\n        };\n        var onerror = function (error) {\n            console.log('Workout save failed!', error);\n            commonEvents.dispatchEvent('model.workout.getlist.failed');\n        };\n\n        workoutDB.getAll(onsuccess, onerror);\n    };\n\n    modelWorkout.getItemsToSync = function getItemsToSync( ) {\n        return modelWorkout.getList( modelWorkout.WORKOUT_STATUS_SAVED );\n    };\n\n    modelWorkout.getWorkout = function getWorkout() {\n        return workout;\n    };\n\n})(window.app);\n",";(function(root){\n    /**\n     *\n     * @param {int} segmentIndex\n     * @param {number} lat\n     * @param {number} lng\n     * @param {int} heartRate\n     * @param {number} elevation\n     * @param {int} time\n     * @constructor\n     */\n    var Point = function(segmentIndex, lat, lng, heartRate, elevation, time){\n        this.segment_index = segmentIndex;\n        this.lat = lat;\n        this.lng = lng;\n        this.heart_rate = heartRate;\n        this.elevation = elevation;\n        this.time = time;\n    };\n\n    Point.prototype = {\n        init: function(){\n\n        }\n    };\n\n    root.Point = Point;\n})(window);\n","/*global window:false, self:false, define:false, module:false */\n\n/**\n * @license IDBWrapper - A cross-browser wrapper for IndexedDB\n * Version 1.7.2\n * Copyright (c) 2011 - 2017 Jens Arps\n * http://jensarps.de/\n *\n * Licensed under the MIT license\n */\n\n(function (name, definition, global) {\n\n    'use strict';\n\n    if (typeof define === 'function') {\n        define(definition);\n    } else if (typeof module !== 'undefined' && module.exports) {\n        module.exports = definition();\n    } else {\n        global[name] = definition();\n    }\n})('IDBStore', function () {\n\n    'use strict';\n\n    var defaultErrorHandler = function (error) {\n        throw error;\n    };\n    var defaultSuccessHandler = function () {\n    };\n\n    var defaults = {\n        storeName: 'Store',\n        storePrefix: 'IDBWrapper-',\n        dbVersion: 1,\n        keyPath: 'id',\n        autoIncrement: true,\n        onStoreReady: function () {\n        },\n        onError: defaultErrorHandler,\n        indexes: [],\n        implementationPreference: [\n            'indexedDB',\n            'webkitIndexedDB',\n            'mozIndexedDB',\n            'shimIndexedDB'\n        ]\n    };\n\n    /**\n     *\n     * The IDBStore constructor\n     *\n     * @constructor\n     * @name IDBStore\n     * @version 1.7.2\n     *\n     * @param {Object} [kwArgs] An options object used to configure the store and\n     *  set callbacks\n     * @param {String} [kwArgs.storeName='Store'] The name of the store\n     * @param {String} [kwArgs.storePrefix='IDBWrapper-'] A prefix that is\n     *  internally used to construct the name of the database, which will be\n     *  kwArgs.storePrefix + kwArgs.storeName\n     * @param {Number} [kwArgs.dbVersion=1] The version of the store\n     * @param {String} [kwArgs.keyPath='id'] The key path to use. If you want to\n     *  setup IDBWrapper to work with out-of-line keys, you need to set this to\n     *  `null`\n     * @param {Boolean} [kwArgs.autoIncrement=true] If set to true, IDBStore will\n     *  automatically make sure a unique keyPath value is present on each object\n     *  that is stored.\n     * @param {Function} [kwArgs.onStoreReady] A callback to be called when the\n     *  store is ready to be used.\n     * @param {Function} [kwArgs.onError=throw] A callback to be called when an\n     *  error occurred during instantiation of the store.\n     * @param {Array} [kwArgs.indexes=[]] An array of indexData objects\n     *  defining the indexes to use with the store. For every index to be used\n     *  one indexData object needs to be passed in the array.\n     *  An indexData object is defined as follows:\n     * @param {Object} [kwArgs.indexes.indexData] An object defining the index to\n     *  use\n     * @param {String} kwArgs.indexes.indexData.name The name of the index\n     * @param {String} [kwArgs.indexes.indexData.keyPath] The key path of the index\n     * @param {Boolean} [kwArgs.indexes.indexData.unique] Whether the index is unique\n     * @param {Boolean} [kwArgs.indexes.indexData.multiEntry] Whether the index is multi entry\n     * @param {Array} [kwArgs.implementationPreference=['indexedDB','webkitIndexedDB','mozIndexedDB','shimIndexedDB']] An array of strings naming implementations to be used, in order or preference\n     * @param {Function} [onStoreReady] A callback to be called when the store\n     * is ready to be used.\n     * @example\n     // create a store for customers with an additional index over the\n     // `lastname` property.\n     var myCustomerStore = new IDBStore({\n         dbVersion: 1,\n         storeName: 'customer-index',\n         keyPath: 'customerid',\n         autoIncrement: true,\n         onStoreReady: populateTable,\n         indexes: [\n             { name: 'lastname', keyPath: 'lastname', unique: false, multiEntry: false }\n         ]\n     });\n     * @example\n     // create a generic store\n     var myCustomerStore = new IDBStore({\n         storeName: 'my-data-store',\n         onStoreReady: function(){\n             // start working with the store.\n         }\n     });\n     */\n    var IDBStore = function (kwArgs, onStoreReady) {\n\n        if (typeof onStoreReady == 'undefined' && typeof kwArgs == 'function') {\n            onStoreReady = kwArgs;\n        }\n        if (Object.prototype.toString.call(kwArgs) != '[object Object]') {\n            kwArgs = {};\n        }\n\n        for (var key in defaults) {\n            this[key] = typeof kwArgs[key] != 'undefined' ? kwArgs[key] : defaults[key];\n        }\n\n        this.dbName = this.storePrefix + this.storeName;\n        this.dbVersion = parseInt(this.dbVersion, 10) || 1;\n\n        onStoreReady && (this.onStoreReady = onStoreReady);\n\n        var env = typeof window == 'object' ? window : self;\n        var availableImplementations = this.implementationPreference.filter(function (implName) {\n            return implName in env;\n        });\n        this.implementation = availableImplementations[0];\n        this.idb = env[this.implementation];\n        this.keyRange = env.IDBKeyRange || env.webkitIDBKeyRange || env.mozIDBKeyRange;\n\n        this.consts = {\n            'READ_ONLY': 'readonly',\n            'READ_WRITE': 'readwrite',\n            'VERSION_CHANGE': 'versionchange',\n            'NEXT': 'next',\n            'NEXT_NO_DUPLICATE': 'nextunique',\n            'PREV': 'prev',\n            'PREV_NO_DUPLICATE': 'prevunique'\n        };\n\n        this.openDB();\n    };\n\n    /** @lends IDBStore.prototype */\n    var proto = {\n\n        /**\n         * A pointer to the IDBStore ctor\n         *\n         * @private\n         * @type {Function}\n         * @constructs\n         */\n        constructor: IDBStore,\n\n        /**\n         * The version of IDBStore\n         *\n         * @type {String}\n         */\n        version: '1.7.2',\n\n        /**\n         * A reference to the IndexedDB object\n         *\n         * @type {IDBDatabase}\n         */\n        db: null,\n\n        /**\n         * The full name of the IndexedDB used by IDBStore, composed of\n         * this.storePrefix + this.storeName\n         *\n         * @type {String}\n         */\n        dbName: null,\n\n        /**\n         * The version of the IndexedDB used by IDBStore\n         *\n         * @type {Number}\n         */\n        dbVersion: null,\n\n        /**\n         * A reference to the objectStore used by IDBStore\n         *\n         * @type {IDBObjectStore}\n         */\n        store: null,\n\n        /**\n         * The store name\n         *\n         * @type {String}\n         */\n        storeName: null,\n\n        /**\n         * The prefix to prepend to the store name\n         *\n         * @type {String}\n         */\n        storePrefix: null,\n\n        /**\n         * The key path\n         *\n         * @type {String}\n         */\n        keyPath: null,\n\n        /**\n         * Whether IDBStore uses autoIncrement\n         *\n         * @type {Boolean}\n         */\n        autoIncrement: null,\n\n        /**\n         * The indexes used by IDBStore\n         *\n         * @type {Array}\n         */\n        indexes: null,\n\n        /**\n         * The implemantations to try to use, in order of preference\n         *\n         * @type {Array}\n         */\n        implementationPreference: null,\n\n        /**\n         * The actual implementation being used\n         *\n         * @type {String}\n         */\n        implementation: '',\n\n        /**\n         * The callback to be called when the store is ready to be used\n         *\n         * @type {Function}\n         */\n        onStoreReady: null,\n\n        /**\n         * The callback to be called if an error occurred during instantiation\n         * of the store\n         *\n         * @type {Function}\n         */\n        onError: null,\n\n        /**\n         * The internal insertID counter\n         *\n         * @type {Number}\n         * @private\n         */\n        _insertIdCount: 0,\n\n        /**\n         * Opens an IndexedDB; called by the constructor.\n         *\n         * Will check if versions match and compare provided index configuration\n         * with existing ones, and update indexes if necessary.\n         *\n         * Will call this.onStoreReady() if everything went well and the store\n         * is ready to use, and this.onError() is something went wrong.\n         *\n         * @private\n         *\n         */\n        openDB: function () {\n\n            var openRequest = this.idb.open(this.dbName, this.dbVersion);\n            var preventSuccessCallback = false;\n\n            openRequest.onerror = function (errorEvent) {\n\n                if (hasVersionError(errorEvent)) {\n                    this.onError(new Error('The version number provided is lower than the existing one.'));\n                } else {\n                    var error;\n\n                    if (errorEvent.target.error) {\n                        error = errorEvent.target.error;\n                    } else {\n                        var errorMessage = 'IndexedDB unknown error occurred when opening DB ' + this.dbName + ' version ' + this.dbVersion;\n                        if ('errorCode' in errorEvent.target) {\n                            errorMessage += ' with error code ' + errorEvent.target.errorCode;\n                        }\n                        error = new Error(errorMessage);\n                    }\n\n                    this.onError(error);\n                }\n            }.bind(this);\n\n            openRequest.onsuccess = function (event) {\n\n                if (preventSuccessCallback) {\n                    return;\n                }\n\n                if (this.db) {\n                    this.onStoreReady();\n                    return;\n                }\n\n                this.db = event.target.result;\n\n                if (typeof this.db.version == 'string') {\n                    this.onError(new Error('The IndexedDB implementation in this browser is outdated. Please upgrade your browser.'));\n                    return;\n                }\n\n                if (!this.db.objectStoreNames.contains(this.storeName)) {\n                    // We should never ever get here.\n                    // Lets notify the user anyway.\n                    this.onError(new Error('Object store couldn\\'t be created.'));\n                    return;\n                }\n\n                var emptyTransaction = this.db.transaction([this.storeName], this.consts.READ_ONLY);\n                this.store = emptyTransaction.objectStore(this.storeName);\n\n                // check indexes\n                var existingIndexes = Array.prototype.slice.call(this.getIndexList());\n                this.indexes.forEach(function (indexData) {\n                    var indexName = indexData.name;\n\n                    if (!indexName) {\n                        preventSuccessCallback = true;\n                        this.onError(new Error('Cannot create index: No index name given.'));\n                        return;\n                    }\n\n                    this.normalizeIndexData(indexData);\n\n                    if (this.hasIndex(indexName)) {\n                        // check if it complies\n                        var actualIndex = this.store.index(indexName);\n                        var complies = this.indexComplies(actualIndex, indexData);\n                        if (!complies) {\n                            preventSuccessCallback = true;\n                            this.onError(new Error('Cannot modify index \"' + indexName + '\" for current version. Please bump version number to ' + ( this.dbVersion + 1 ) + '.'));\n                        }\n\n                        existingIndexes.splice(existingIndexes.indexOf(indexName), 1);\n                    } else {\n                        preventSuccessCallback = true;\n                        this.onError(new Error('Cannot create new index \"' + indexName + '\" for current version. Please bump version number to ' + ( this.dbVersion + 1 ) + '.'));\n                    }\n\n                }, this);\n\n                if (existingIndexes.length) {\n                    preventSuccessCallback = true;\n                    this.onError(new Error('Cannot delete index(es) \"' + existingIndexes.toString() + '\" for current version. Please bump version number to ' + ( this.dbVersion + 1 ) + '.'));\n                }\n\n                preventSuccessCallback || this.onStoreReady();\n            }.bind(this);\n\n            openRequest.onupgradeneeded = function (/* IDBVersionChangeEvent */ event) {\n\n                this.db = event.target.result;\n\n                if (this.db.objectStoreNames.contains(this.storeName)) {\n                    this.store = event.target.transaction.objectStore(this.storeName);\n                } else {\n                    var optionalParameters = {autoIncrement: this.autoIncrement};\n                    if (this.keyPath !== null) {\n                        optionalParameters.keyPath = this.keyPath;\n                    }\n                    this.store = this.db.createObjectStore(this.storeName, optionalParameters);\n                }\n\n                var existingIndexes = Array.prototype.slice.call(this.getIndexList());\n                this.indexes.forEach(function (indexData) {\n                    var indexName = indexData.name;\n\n                    if (!indexName) {\n                        preventSuccessCallback = true;\n                        this.onError(new Error('Cannot create index: No index name given.'));\n                    }\n\n                    this.normalizeIndexData(indexData);\n\n                    if (this.hasIndex(indexName)) {\n                        // check if it complies\n                        var actualIndex = this.store.index(indexName);\n                        var complies = this.indexComplies(actualIndex, indexData);\n                        if (!complies) {\n                            // index differs, need to delete and re-create\n                            this.store.deleteIndex(indexName);\n                            this.store.createIndex(indexName, indexData.keyPath, {\n                                unique: indexData.unique,\n                                multiEntry: indexData.multiEntry\n                            });\n                        }\n\n                        existingIndexes.splice(existingIndexes.indexOf(indexName), 1);\n                    } else {\n                        this.store.createIndex(indexName, indexData.keyPath, {\n                            unique: indexData.unique,\n                            multiEntry: indexData.multiEntry\n                        });\n                    }\n\n                }, this);\n\n                if (existingIndexes.length) {\n                    existingIndexes.forEach(function (_indexName) {\n                        this.store.deleteIndex(_indexName);\n                    }, this);\n                }\n\n            }.bind(this);\n        },\n\n        /**\n         * Deletes the database used for this store if the IDB implementations\n         * provides that functionality.\n         *\n         * @param {Function} [onSuccess] A callback that is called if deletion\n         *  was successful.\n         * @param {Function} [onError] A callback that is called if deletion\n         *  failed.\n         */\n        deleteDatabase: function (onSuccess, onError) {\n            if (this.idb.deleteDatabase) {\n                this.db.close();\n                var deleteRequest = this.idb.deleteDatabase(this.dbName);\n                deleteRequest.onsuccess = onSuccess;\n                deleteRequest.onerror = onError;\n            } else {\n                onError(new Error('Browser does not support IndexedDB deleteDatabase!'));\n            }\n        },\n\n        /*********************\n         * data manipulation *\n         *********************/\n\n        /**\n         * Puts an object into the store. If an entry with the given id exists,\n         * it will be overwritten. This method has a different signature for inline\n         * keys and out-of-line keys; please see the examples below.\n         *\n         * @param {*} [key] The key to store. This is only needed if IDBWrapper\n         *  is set to use out-of-line keys. For inline keys - the default scenario -\n         *  this can be omitted.\n         * @param {Object} value The data object to store.\n         * @param {Function} [onSuccess] A callback that is called if insertion\n         *  was successful.\n         * @param {Function} [onError] A callback that is called if insertion\n         *  failed.\n         * @returns {IDBTransaction} The transaction used for this operation.\n         * @example\n         // Storing an object, using inline keys (the default scenario):\n         var myCustomer = {\n             customerid: 2346223,\n             lastname: 'Doe',\n             firstname: 'John'\n         };\n         myCustomerStore.put(myCustomer, mySuccessHandler, myErrorHandler);\n         // Note that passing success- and error-handlers is optional.\n         * @example\n         // Storing an object, using out-of-line keys:\n         var myCustomer = {\n             lastname: 'Doe',\n             firstname: 'John'\n         };\n         myCustomerStore.put(2346223, myCustomer, mySuccessHandler, myErrorHandler);\n         // Note that passing success- and error-handlers is optional.\n         */\n        put: function (key, value, onSuccess, onError) {\n            if (this.keyPath !== null) {\n                onError = onSuccess;\n                onSuccess = value;\n                value = key;\n            }\n            onError || (onError = defaultErrorHandler);\n            onSuccess || (onSuccess = defaultSuccessHandler);\n\n            var hasSuccess = false,\n                result = null,\n                putRequest;\n\n            var putTransaction = this.db.transaction([this.storeName], this.consts.READ_WRITE);\n            putTransaction.oncomplete = function () {\n                var callback = hasSuccess ? onSuccess : onError;\n                callback(result);\n            };\n            putTransaction.onabort = onError;\n            putTransaction.onerror = onError;\n\n            if (this.keyPath !== null) { // in-line keys\n                this._addIdPropertyIfNeeded(value);\n                putRequest = putTransaction.objectStore(this.storeName).put(value);\n            } else { // out-of-line keys\n                putRequest = putTransaction.objectStore(this.storeName).put(value, key);\n            }\n            putRequest.onsuccess = function (event) {\n                hasSuccess = true;\n                result = event.target.result;\n            };\n            putRequest.onerror = onError;\n\n            return putTransaction;\n        },\n\n        /**\n         * Retrieves an object from the store. If no entry exists with the given id,\n         * the success handler will be called with null as first and only argument.\n         *\n         * @param {*} key The id of the object to fetch.\n         * @param {Function} [onSuccess] A callback that is called if fetching\n         *  was successful. Will receive the object as only argument.\n         * @param {Function} [onError] A callback that will be called if an error\n         *  occurred during the operation.\n         * @returns {IDBTransaction} The transaction used for this operation.\n         */\n        get: function (key, onSuccess, onError) {\n            onError || (onError = defaultErrorHandler);\n            onSuccess || (onSuccess = defaultSuccessHandler);\n\n            var hasSuccess = false,\n                result = null;\n\n            var getTransaction = this.db.transaction([this.storeName], this.consts.READ_ONLY);\n            getTransaction.oncomplete = function () {\n                var callback = hasSuccess ? onSuccess : onError;\n                callback(result);\n            };\n            getTransaction.onabort = onError;\n            getTransaction.onerror = onError;\n            var getRequest = getTransaction.objectStore(this.storeName).get(key);\n            getRequest.onsuccess = function (event) {\n                hasSuccess = true;\n                result = event.target.result;\n            };\n            getRequest.onerror = onError;\n\n            return getTransaction;\n        },\n\n        /**\n         * Removes an object from the store.\n         *\n         * @param {*} key The id of the object to remove.\n         * @param {Function} [onSuccess] A callback that is called if the removal\n         *  was successful.\n         * @param {Function} [onError] A callback that will be called if an error\n         *  occurred during the operation.\n         * @returns {IDBTransaction} The transaction used for this operation.\n         */\n        remove: function (key, onSuccess, onError) {\n            onError || (onError = defaultErrorHandler);\n            onSuccess || (onSuccess = defaultSuccessHandler);\n\n            var hasSuccess = false,\n                result = null;\n\n            var removeTransaction = this.db.transaction([this.storeName], this.consts.READ_WRITE);\n            removeTransaction.oncomplete = function () {\n                var callback = hasSuccess ? onSuccess : onError;\n                callback(result);\n            };\n            removeTransaction.onabort = onError;\n            removeTransaction.onerror = onError;\n\n            var deleteRequest = removeTransaction.objectStore(this.storeName)['delete'](key);\n            deleteRequest.onsuccess = function (event) {\n                hasSuccess = true;\n                result = event.target.result;\n            };\n            deleteRequest.onerror = onError;\n\n            return removeTransaction;\n        },\n\n        /**\n         * Runs a batch of put and/or remove operations on the store.\n         *\n         * @param {Array} dataArray An array of objects containing the operation to run\n         *  and the data object (for put operations).\n         * @param {Function} [onSuccess] A callback that is called if all operations\n         *  were successful.\n         * @param {Function} [onError] A callback that is called if an error\n         *  occurred during one of the operations.\n         * @returns {IDBTransaction} The transaction used for this operation.\n         */\n        batch: function (dataArray, onSuccess, onError) {\n            onError || (onError = defaultErrorHandler);\n            onSuccess || (onSuccess = defaultSuccessHandler);\n\n            if (Object.prototype.toString.call(dataArray) != '[object Array]') {\n                onError(new Error('dataArray argument must be of type Array.'));\n            } else if (dataArray.length === 0) {\n                return onSuccess(true);\n            }\n\n            var count = dataArray.length;\n            var called = false;\n            var hasSuccess = false;\n\n            var batchTransaction = this.db.transaction([this.storeName], this.consts.READ_WRITE);\n            batchTransaction.oncomplete = function () {\n                var callback = hasSuccess ? onSuccess : onError;\n                callback(hasSuccess);\n            };\n            batchTransaction.onabort = onError;\n            batchTransaction.onerror = onError;\n\n\n            var onItemSuccess = function () {\n                count--;\n                if (count === 0 && !called) {\n                    called = true;\n                    hasSuccess = true;\n                }\n            };\n\n            dataArray.forEach(function (operation) {\n                var type = operation.type;\n                var key = operation.key;\n                var value = operation.value;\n\n                var onItemError = function (err) {\n                    batchTransaction.abort();\n                    if (!called) {\n                        called = true;\n                        onError(err, type, key);\n                    }\n                };\n\n                if (type == 'remove') {\n                    var deleteRequest = batchTransaction.objectStore(this.storeName)['delete'](key);\n                    deleteRequest.onsuccess = onItemSuccess;\n                    deleteRequest.onerror = onItemError;\n                } else if (type == 'put') {\n                    var putRequest;\n                    if (this.keyPath !== null) { // in-line keys\n                        this._addIdPropertyIfNeeded(value);\n                        putRequest = batchTransaction.objectStore(this.storeName).put(value);\n                    } else { // out-of-line keys\n                        putRequest = batchTransaction.objectStore(this.storeName).put(value, key);\n                    }\n                    putRequest.onsuccess = onItemSuccess;\n                    putRequest.onerror = onItemError;\n                }\n            }, this);\n\n            return batchTransaction;\n        },\n\n        /**\n         * Takes an array of objects and stores them in a single transaction.\n         *\n         * @param {Array} dataArray An array of objects to store\n         * @param {Function} [onSuccess] A callback that is called if all operations\n         *  were successful.\n         * @param {Function} [onError] A callback that is called if an error\n         *  occurred during one of the operations.\n         * @returns {IDBTransaction} The transaction used for this operation.\n         */\n        putBatch: function (dataArray, onSuccess, onError) {\n            var batchData = dataArray.map(function (item) {\n                return {type: 'put', value: item};\n            });\n\n            return this.batch(batchData, onSuccess, onError);\n        },\n\n        /**\n         * Like putBatch, takes an array of objects and stores them in a single\n         * transaction, but allows processing of the result values.  Returns the\n         * processed records containing the key for newly created records to the\n         * onSuccess calllback instead of only returning true or false for success.\n         * In addition, added the option for the caller to specify a key field that\n         * should be set to the newly created key.\n         *\n         * @param {Array} dataArray An array of objects to store\n         * @param {Object} [options] An object containing optional options\n         * @param {String} [options.keyField=this.keyPath] Specifies a field in the record to update\n         *  with the auto-incrementing key. Defaults to the store's keyPath.\n         * @param {Function} [onSuccess] A callback that is called if all operations\n         *  were successful.\n         * @param {Function} [onError] A callback that is called if an error\n         *  occurred during one of the operations.\n         * @returns {IDBTransaction} The transaction used for this operation.\n         *\n         */\n        upsertBatch: function (dataArray, options, onSuccess, onError) {\n            // handle `dataArray, onSuccess, onError` signature\n            if (typeof options == 'function') {\n                onSuccess = options;\n                onError = onSuccess;\n                options = {};\n            }\n\n            onError || (onError = defaultErrorHandler);\n            onSuccess || (onSuccess = defaultSuccessHandler);\n            options || (options = {});\n\n            if (Object.prototype.toString.call(dataArray) != '[object Array]') {\n                onError(new Error('dataArray argument must be of type Array.'));\n            }\n\n            var keyField = options.keyField || this.keyPath;\n            var count = dataArray.length;\n            var called = false;\n            var hasSuccess = false;\n            var index = 0; // assume success callbacks are executed in order\n\n            var batchTransaction = this.db.transaction([this.storeName], this.consts.READ_WRITE);\n            batchTransaction.oncomplete = function () {\n                if (hasSuccess) {\n                    onSuccess(dataArray);\n                } else {\n                    onError(false);\n                }\n            };\n            batchTransaction.onabort = onError;\n            batchTransaction.onerror = onError;\n\n            var onItemSuccess = function (event) {\n                var record = dataArray[index++];\n                record[keyField] = event.target.result;\n\n                count--;\n                if (count === 0 && !called) {\n                    called = true;\n                    hasSuccess = true;\n                }\n            };\n\n            dataArray.forEach(function (record) {\n                var key = record.key;\n\n                var onItemError = function (err) {\n                    batchTransaction.abort();\n                    if (!called) {\n                        called = true;\n                        onError(err);\n                    }\n                };\n\n                var putRequest;\n                if (this.keyPath !== null) { // in-line keys\n                    this._addIdPropertyIfNeeded(record);\n                    putRequest = batchTransaction.objectStore(this.storeName).put(record);\n                } else { // out-of-line keys\n                    putRequest = batchTransaction.objectStore(this.storeName).put(record, key);\n                }\n                putRequest.onsuccess = onItemSuccess;\n                putRequest.onerror = onItemError;\n            }, this);\n\n            return batchTransaction;\n        },\n\n        /**\n         * Takes an array of keys and removes matching objects in a single\n         * transaction.\n         *\n         * @param {Array} keyArray An array of keys to remove\n         * @param {Function} [onSuccess] A callback that is called if all operations\n         *  were successful.\n         * @param {Function} [onError] A callback that is called if an error\n         *  occurred during one of the operations.\n         * @returns {IDBTransaction} The transaction used for this operation.\n         */\n        removeBatch: function (keyArray, onSuccess, onError) {\n            var batchData = keyArray.map(function (key) {\n                return {type: 'remove', key: key};\n            });\n\n            return this.batch(batchData, onSuccess, onError);\n        },\n\n        /**\n         * Takes an array of keys and fetches matching objects\n         *\n         * @param {Array} keyArray An array of keys identifying the objects to fetch\n         * @param {Function} [onSuccess] A callback that is called if all operations\n         *  were successful.\n         * @param {Function} [onError] A callback that is called if an error\n         *  occurred during one of the operations.\n         * @param {String} [arrayType='sparse'] The type of array to pass to the\n         *  success handler. May be one of 'sparse', 'dense' or 'skip'. Defaults to\n         *  'sparse'. This parameter specifies how to handle the situation if a get\n         *  operation did not throw an error, but there was no matching object in\n         *  the database. In most cases, 'sparse' provides the most desired\n         *  behavior. See the examples for details.\n         * @returns {IDBTransaction} The transaction used for this operation.\n         * @example\n         // given that there are two objects in the database with the keypath\n         // values 1 and 2, and the call looks like this:\n         myStore.getBatch([1, 5, 2], onError, function (data) { … }, arrayType);\n\n         // this is what the `data` array will be like:\n\n         // arrayType == 'sparse':\n         // data is a sparse array containing two entries and having a length of 3:\n         [Object, 2: Object]\n         0: Object\n         2: Object\n         length: 3\n         // calling forEach on data will result in the callback being called two\n         // times, with the index parameter matching the index of the key in the\n         // keyArray.\n\n         // arrayType == 'dense':\n         // data is a dense array containing three entries and having a length of 3,\n         // where data[1] is of type undefined:\n         [Object, undefined, Object]\n         0: Object\n         1: undefined\n         2: Object\n         length: 3\n         // calling forEach on data will result in the callback being called three\n         // times, with the index parameter matching the index of the key in the\n         // keyArray, but the second call will have undefined as first argument.\n\n         // arrayType == 'skip':\n         // data is a dense array containing two entries and having a length of 2:\n         [Object, Object]\n         0: Object\n         1: Object\n         length: 2\n         // calling forEach on data will result in the callback being called two\n         // times, with the index parameter not matching the index of the key in the\n         // keyArray.\n         */\n        getBatch: function (keyArray, onSuccess, onError, arrayType) {\n            onError || (onError = defaultErrorHandler);\n            onSuccess || (onSuccess = defaultSuccessHandler);\n            arrayType || (arrayType = 'sparse');\n\n            if (Object.prototype.toString.call(keyArray) != '[object Array]') {\n                onError(new Error('keyArray argument must be of type Array.'));\n            } else if (keyArray.length === 0) {\n                return onSuccess([]);\n            }\n\n            var data = [];\n            var count = keyArray.length;\n            var called = false;\n            var hasSuccess = false;\n            var result = null;\n\n            var batchTransaction = this.db.transaction([this.storeName], this.consts.READ_ONLY);\n            batchTransaction.oncomplete = function () {\n                var callback = hasSuccess ? onSuccess : onError;\n                callback(result);\n            };\n            batchTransaction.onabort = onError;\n            batchTransaction.onerror = onError;\n\n            var onItemSuccess = function (event) {\n                if (event.target.result || arrayType == 'dense') {\n                    data.push(event.target.result);\n                } else if (arrayType == 'sparse') {\n                    data.length++;\n                }\n                count--;\n                if (count === 0) {\n                    called = true;\n                    hasSuccess = true;\n                    result = data;\n                }\n            };\n\n            keyArray.forEach(function (key) {\n\n                var onItemError = function (err) {\n                    called = true;\n                    result = err;\n                    onError(err);\n                    batchTransaction.abort();\n                };\n\n                var getRequest = batchTransaction.objectStore(this.storeName).get(key);\n                getRequest.onsuccess = onItemSuccess;\n                getRequest.onerror = onItemError;\n\n            }, this);\n\n            return batchTransaction;\n        },\n\n        /**\n         * Fetches all entries in the store.\n         *\n         * @param {Function} [onSuccess] A callback that is called if the operation\n         *  was successful. Will receive an array of objects.\n         * @param {Function} [onError] A callback that will be called if an error\n         *  occurred during the operation.\n         * @returns {IDBTransaction} The transaction used for this operation.\n         */\n        getAll: function (onSuccess, onError) {\n            onError || (onError = defaultErrorHandler);\n            onSuccess || (onSuccess = defaultSuccessHandler);\n            var getAllTransaction = this.db.transaction([this.storeName], this.consts.READ_ONLY);\n            var store = getAllTransaction.objectStore(this.storeName);\n            if (store.getAll) {\n                this._getAllNative(getAllTransaction, store, onSuccess, onError);\n            } else {\n                this._getAllCursor(getAllTransaction, store, onSuccess, onError);\n            }\n\n            return getAllTransaction;\n        },\n\n        /**\n         * Implements getAll for IDB implementations that have a non-standard\n         * getAll() method.\n         *\n         * @param {IDBTransaction} getAllTransaction An open READ transaction.\n         * @param {IDBObjectStore} store A reference to the store.\n         * @param {Function} onSuccess A callback that will be called if the\n         *  operation was successful.\n         * @param {Function} onError A callback that will be called if an\n         *  error occurred during the operation.\n         * @private\n         */\n        _getAllNative: function (getAllTransaction, store, onSuccess, onError) {\n            var hasSuccess = false,\n                result = null;\n\n            getAllTransaction.oncomplete = function () {\n                var callback = hasSuccess ? onSuccess : onError;\n                callback(result);\n            };\n            getAllTransaction.onabort = onError;\n            getAllTransaction.onerror = onError;\n\n            var getAllRequest = store.getAll();\n            getAllRequest.onsuccess = function (event) {\n                hasSuccess = true;\n                result = event.target.result;\n            };\n            getAllRequest.onerror = onError;\n        },\n\n        /**\n         * Implements getAll for IDB implementations that do not have a getAll()\n         * method.\n         *\n         * @param {IDBTransaction} getAllTransaction An open READ transaction.\n         * @param {IDBObjectStore} store A reference to the store.\n         * @param {Function} onSuccess A callback that will be called if the\n         *  operation was successful.\n         * @param {Function} onError A callback that will be called if an\n         *  error occurred during the operation.\n         * @private\n         */\n        _getAllCursor: function (getAllTransaction, store, onSuccess, onError) {\n            var all = [],\n                hasSuccess = false,\n                result = null;\n\n            getAllTransaction.oncomplete = function () {\n                var callback = hasSuccess ? onSuccess : onError;\n                callback(result);\n            };\n            getAllTransaction.onabort = onError;\n            getAllTransaction.onerror = onError;\n\n            var cursorRequest = store.openCursor();\n            cursorRequest.onsuccess = function (event) {\n                var cursor = event.target.result;\n                if (cursor) {\n                    all.push(cursor.value);\n                    cursor['continue']();\n                }\n                else {\n                    hasSuccess = true;\n                    result = all;\n                }\n            };\n            cursorRequest.onError = onError;\n        },\n\n        /**\n         * Clears the store, i.e. deletes all entries in the store.\n         *\n         * @param {Function} [onSuccess] A callback that will be called if the\n         *  operation was successful.\n         * @param {Function} [onError] A callback that will be called if an\n         *  error occurred during the operation.\n         * @returns {IDBTransaction} The transaction used for this operation.\n         */\n        clear: function (onSuccess, onError) {\n            onError || (onError = defaultErrorHandler);\n            onSuccess || (onSuccess = defaultSuccessHandler);\n\n            var hasSuccess = false,\n                result = null;\n\n            var clearTransaction = this.db.transaction([this.storeName], this.consts.READ_WRITE);\n            clearTransaction.oncomplete = function () {\n                var callback = hasSuccess ? onSuccess : onError;\n                callback(result);\n            };\n            clearTransaction.onabort = onError;\n            clearTransaction.onerror = onError;\n\n            var clearRequest = clearTransaction.objectStore(this.storeName).clear();\n            clearRequest.onsuccess = function (event) {\n                hasSuccess = true;\n                result = event.target.result;\n            };\n            clearRequest.onerror = onError;\n\n            return clearTransaction;\n        },\n\n        /**\n         * Checks if an id property needs to present on a object and adds one if\n         * necessary.\n         *\n         * @param {Object} dataObj The data object that is about to be stored\n         * @private\n         */\n        _addIdPropertyIfNeeded: function (dataObj) {\n            if (typeof dataObj[this.keyPath] == 'undefined') {\n                dataObj[this.keyPath] = this._insertIdCount++ + Date.now();\n            }\n        },\n\n        /************\n         * indexing *\n         ************/\n\n        /**\n         * Returns a DOMStringList of index names of the store.\n         *\n         * @return {DOMStringList} The list of index names\n         */\n        getIndexList: function () {\n            return this.store.indexNames;\n        },\n\n        /**\n         * Checks if an index with the given name exists in the store.\n         *\n         * @param {String} indexName The name of the index to look for\n         * @return {Boolean} Whether the store contains an index with the given name\n         */\n        hasIndex: function (indexName) {\n            return this.store.indexNames.contains(indexName);\n        },\n\n        /**\n         * Normalizes an object containing index data and assures that all\n         * properties are set.\n         *\n         * @param {Object} indexData The index data object to normalize\n         * @param {String} indexData.name The name of the index\n         * @param {String} [indexData.keyPath] The key path of the index\n         * @param {Boolean} [indexData.unique] Whether the index is unique\n         * @param {Boolean} [indexData.multiEntry] Whether the index is multi entry\n         */\n        normalizeIndexData: function (indexData) {\n            indexData.keyPath = indexData.keyPath || indexData.name;\n            indexData.unique = !!indexData.unique;\n            indexData.multiEntry = !!indexData.multiEntry;\n        },\n\n        /**\n         * Checks if an actual index complies with an expected index.\n         *\n         * @param {IDBIndex} actual The actual index found in the store\n         * @param {Object} expected An Object describing an expected index\n         * @return {Boolean} Whether both index definitions are identical\n         */\n        indexComplies: function (actual, expected) {\n            var complies = ['keyPath', 'unique', 'multiEntry'].every(function (key) {\n                // IE10 returns undefined for no multiEntry\n                if (key == 'multiEntry' && actual[key] === undefined && expected[key] === false) {\n                    return true;\n                }\n                // Compound keys\n                if (key == 'keyPath' && Object.prototype.toString.call(expected[key]) == '[object Array]') {\n                    var exp = expected.keyPath;\n                    var act = actual.keyPath;\n\n                    // IE10 can't handle keyPath sequences and stores them as a string.\n                    // The index will be unusable there, but let's still return true if\n                    // the keyPath sequence matches.\n                    if (typeof act == 'string') {\n                        return exp.toString() == act;\n                    }\n\n                    // Chrome/Opera stores keyPath squences as DOMStringList, Firefox\n                    // as Array\n                    if (!(typeof act.contains == 'function' || typeof act.indexOf == 'function')) {\n                        return false;\n                    }\n\n                    if (act.length !== exp.length) {\n                        return false;\n                    }\n\n                    for (var i = 0, m = exp.length; i < m; i++) {\n                        if (!( (act.contains && act.contains(exp[i])) || act.indexOf(exp[i] !== -1) )) {\n                            return false;\n                        }\n                    }\n                    return true;\n                }\n                return expected[key] == actual[key];\n            });\n            return complies;\n        },\n\n        /**********\n         * cursor *\n         **********/\n\n        /**\n         * Iterates over the store using the given options and calling onItem\n         * for each entry matching the options.\n         *\n         * @param {Function} onItem A callback to be called for each match\n         * @param {Object} [options] An object defining specific options\n         * @param {String} [options.index=null] A name of an IDBIndex to operate on\n         * @param {String} [options.order=ASC] The order in which to provide the\n         *  results, can be 'DESC' or 'ASC'\n         * @param {Boolean} [options.autoContinue=true] Whether to automatically\n         *  iterate the cursor to the next result\n         * @param {Boolean} [options.filterDuplicates=false] Whether to exclude\n         *  duplicate matches\n         * @param {IDBKeyRange} [options.keyRange=null] An IDBKeyRange to use\n         * @param {Boolean} [options.writeAccess=false] Whether grant write access\n         *  to the store in the onItem callback\n         * @param {Function} [options.onEnd=null] A callback to be called after\n         *  iteration has ended\n         * @param {Function} [options.onError=throw] A callback to be called\n         *  if an error occurred during the operation.\n         * @param {Number} [options.limit=Infinity] Limit the number of returned\n         *  results to this number\n         * @param {Number} [options.offset=0] Skip the provided number of results\n         *  in the resultset\n         * @param {Boolean} [options.allowItemRejection=false] Allows the onItem\n         * function to return a Boolean to accept or reject the current item\n         * @returns {IDBTransaction} The transaction used for this operation.\n         */\n        iterate: function (onItem, options) {\n            options = mixin({\n                index: null,\n                order: 'ASC',\n                autoContinue: true,\n                filterDuplicates: false,\n                keyRange: null,\n                writeAccess: false,\n                onEnd: null,\n                onError: defaultErrorHandler,\n                limit: Infinity,\n                offset: 0,\n                allowItemRejection: false\n            }, options || {});\n\n            var directionType = options.order.toLowerCase() == 'desc' ? 'PREV' : 'NEXT';\n            if (options.filterDuplicates) {\n                directionType += '_NO_DUPLICATE';\n            }\n\n            var hasSuccess = false;\n            var cursorTransaction = this.db.transaction([this.storeName], this.consts[options.writeAccess ? 'READ_WRITE' : 'READ_ONLY']);\n            var cursorTarget = cursorTransaction.objectStore(this.storeName);\n            if (options.index) {\n                cursorTarget = cursorTarget.index(options.index);\n            }\n            var recordCount = 0;\n\n            cursorTransaction.oncomplete = function () {\n                if (!hasSuccess) {\n                    options.onError(null);\n                    return;\n                }\n                if (options.onEnd) {\n                    options.onEnd();\n                } else {\n                    onItem(null);\n                }\n            };\n            cursorTransaction.onabort = options.onError;\n            cursorTransaction.onerror = options.onError;\n\n            var cursorRequest = cursorTarget.openCursor(options.keyRange, this.consts[directionType]);\n            cursorRequest.onerror = options.onError;\n            cursorRequest.onsuccess = function (event) {\n                var cursor = event.target.result;\n                if (cursor) {\n                    if (options.offset) {\n                        cursor.advance(options.offset);\n                        options.offset = 0;\n                    } else {\n                        var onItemReturn = onItem(cursor.value, cursor, cursorTransaction);\n                        if (!options.allowItemRejection || onItemReturn !== false) {\n                            recordCount++;\n                        }\n                        if (options.autoContinue) {\n                            if (recordCount + options.offset < options.limit) {\n                                cursor['continue']();\n                            } else {\n                                hasSuccess = true;\n                            }\n                        }\n                    }\n                } else {\n                    hasSuccess = true;\n                }\n            };\n\n            return cursorTransaction;\n        },\n\n        /**\n         * Runs a query against the store and passes an array containing matched\n         * objects to the success handler.\n         *\n         * @param {Function} onSuccess A callback to be called when the operation\n         *  was successful.\n         * @param {Object} [options] An object defining specific options\n         * @param {String} [options.index=null] A name of an IDBIndex to operate on\n         * @param {String} [options.order=ASC] The order in which to provide the\n         *  results, can be 'DESC' or 'ASC'\n         * @param {Boolean} [options.filterDuplicates=false] Whether to exclude\n         *  duplicate matches\n         * @param {IDBKeyRange} [options.keyRange=null] An IDBKeyRange to use\n         * @param {Function} [options.onError=throw] A callback to be called\n         *  if an error occurred during the operation.\n         * @param {Number} [options.limit=Infinity] Limit the number of returned\n         *  results to this number\n         * @param {Number} [options.offset=0] Skip the provided number of results\n         *  in the resultset\n         * @param {Function} [options.filter=null] A custom filter function to\n         *  apply to query resuts before returning. Must return `false` to reject\n         *  an item. Can be combined with keyRanges.\n         * @returns {IDBTransaction} The transaction used for this operation.\n         */\n        query: function (onSuccess, options) {\n            var result = [],\n                processedItems = 0;\n            options = options || {};\n            options.autoContinue = true;\n            options.writeAccess = false;\n            options.allowItemRejection = !!options.filter;\n            options.onEnd = function () {\n                onSuccess(result, processedItems);\n            };\n            return this.iterate(function (item) {\n                processedItems++;\n                var accept = options.filter ? options.filter(item) : true;\n                if (accept !== false) {\n                    result.push(item);\n                }\n                return accept;\n            }, options);\n        },\n\n        /**\n         *\n         * Runs a query against the store, but only returns the number of matches\n         * instead of the matches itself.\n         *\n         * @param {Function} onSuccess A callback to be called if the opration\n         *  was successful.\n         * @param {Object} [options] An object defining specific options\n         * @param {String} [options.index=null] A name of an IDBIndex to operate on\n         * @param {IDBKeyRange} [options.keyRange=null] An IDBKeyRange to use\n         * @param {Function} [options.onError=throw] A callback to be called if an error\n         *  occurred during the operation.\n         * @returns {IDBTransaction} The transaction used for this operation.\n         */\n        count: function (onSuccess, options) {\n\n            options = mixin({\n                index: null,\n                keyRange: null\n            }, options || {});\n\n            var onError = options.onError || defaultErrorHandler;\n\n            var hasSuccess = false,\n                result = null;\n\n            var cursorTransaction = this.db.transaction([this.storeName], this.consts.READ_ONLY);\n            cursorTransaction.oncomplete = function () {\n                var callback = hasSuccess ? onSuccess : onError;\n                callback(result);\n            };\n            cursorTransaction.onabort = onError;\n            cursorTransaction.onerror = onError;\n\n            var cursorTarget = cursorTransaction.objectStore(this.storeName);\n            if (options.index) {\n                cursorTarget = cursorTarget.index(options.index);\n            }\n            var countRequest = cursorTarget.count(options.keyRange);\n            countRequest.onsuccess = function (evt) {\n                hasSuccess = true;\n                result = evt.target.result;\n            };\n            countRequest.onError = onError;\n\n            return cursorTransaction;\n        },\n\n        /**************/\n        /* key ranges */\n        /**************/\n\n        /**\n         * Creates a key range using specified options. This key range can be\n         * handed over to the count() and iterate() methods.\n         *\n         * Note: You must provide at least one or both of \"lower\" or \"upper\" value.\n         *\n         * @param {Object} options The options for the key range to create\n         * @param {*} [options.lower] The lower bound\n         * @param {Boolean} [options.excludeLower] Whether to exclude the lower\n         *  bound passed in options.lower from the key range\n         * @param {*} [options.upper] The upper bound\n         * @param {Boolean} [options.excludeUpper] Whether to exclude the upper\n         *  bound passed in options.upper from the key range\n         * @param {*} [options.only] A single key value. Use this if you need a key\n         *  range that only includes one value for a key. Providing this\n         *  property invalidates all other properties.\n         * @return {IDBKeyRange} The IDBKeyRange representing the specified options\n         */\n        makeKeyRange: function (options) {\n            /*jshint onecase:true */\n            var keyRange,\n                hasLower = typeof options.lower != 'undefined',\n                hasUpper = typeof options.upper != 'undefined',\n                isOnly = typeof options.only != 'undefined';\n\n            switch (true) {\n                case isOnly:\n                    keyRange = this.keyRange.only(options.only);\n                    break;\n                case hasLower && hasUpper:\n                    keyRange = this.keyRange.bound(options.lower, options.upper, options.excludeLower, options.excludeUpper);\n                    break;\n                case hasLower:\n                    keyRange = this.keyRange.lowerBound(options.lower, options.excludeLower);\n                    break;\n                case hasUpper:\n                    keyRange = this.keyRange.upperBound(options.upper, options.excludeUpper);\n                    break;\n                default:\n                    throw new Error('Cannot create KeyRange. Provide one or both of \"lower\" or \"upper\" value, or an \"only\" value.');\n            }\n\n            return keyRange;\n\n        }\n\n    };\n\n    /** helpers **/\n    var empty = {};\n\n    function mixin (target, source) {\n        var name, s;\n        for (name in source) {\n            s = source[name];\n            if (s !== empty[name] && s !== target[name]) {\n                target[name] = s;\n            }\n        }\n        return target;\n    }\n\n    function hasVersionError(errorEvent) {\n        if ('error' in errorEvent.target) {\n            return errorEvent.target.error.name == 'VersionError';\n        } else if ('errorCode' in errorEvent.target) {\n            return errorEvent.target.errorCode == 12;\n        }\n        return false;\n    }\n\n    IDBStore.prototype = proto;\n    IDBStore.version = proto.version;\n\n    return IDBStore;\n\n}, this);\n","/*global window, console, geolocation, setTimeout*/\n\n/**\n * Application sync model module.\n * It is responsible for syncing workouts with the server.\n *\n * @module app.model.geolocation\n * @requires {@link app.common.events}\n * @requires {@link app.common.calculations}\n * @namespace app.model.geolocation\n * @memberof app.model\n */\n\n// make sure that \"app\" namespace is created\nwindow.app = window.app || {};\n\n(function defineAppModelSync(app) {\n    'use strict';\n\n        /**\n         * Workout model module reference.\n         *\n         * @private\n         * @type {object}\n         */\n        var modelSync = null,\n\n        /**\n         * Geolocation model module reference.\n         *\n         * @private\n         * @type {object}\n         */\n        modelWorkout = app.model.workout,\n\n        /**\n         * Common events module reference.\n         *\n         * @private\n         * @type {object}\n         */\n        commonEvents = app.common.events,\n\n        modelNetwork = app.model.network,\n\n        syncUrls = {\n            login: '',\n            upload: ''\n        };\n\n    // create namespace for the module\n    app.model = app.model || {};\n    app.model.sync = app.model.sync || {};\n    modelSync = app.model.sync;\n\n\n\n    /**\n     * Registers event listeners.\n     *\n     * @private\n     */\n    function bindEvents() {\n        window.addEventListener(\n            'model.workout.getlist.successful',\n            function(e){\n                e.stopPropagation();\n                var workouts = e.detail;\n                uploadWorkouts(workouts);\n            },\n            'model.workout.getlist.failed',\n            function(e){\n                e.stopPropagation();\n                commonEvents.dispatchEvent('model.sync.upload.failed');\n            }\n        );\n    }\n\n    function getToken(){\n        return localStorage.getItem('token');\n    }\n\n    function createAuthHeader(){\n        var token = getToken() || '',\n            header = {\n                key: 'Authorization',\n                value: 'Bearer ' + token,\n            };\n\n        return token.length ? header : false;\n    }\n\n    /**\n     * Initializes the workout model module.\n     *\n     * @memberof app.model.workout\n     * @public\n     * @fires model.sync.login.successful\n     * @fires model.sync.login.failed\n     * @param {string} loginUrl\n     * @param {string} uploadUrl\n     */\n    modelSync.init = function init(loginUrl, uploadUrl) {\n        syncUrls.login = loginUrl;\n        syncUrls.upload = uploadUrl;\n\n        bindEvents();\n    };\n\n    modelSync.login = function login(email, password) {\n        var client = new XMLHttpRequest(),\n            localStorage = window.localStorage;\n\n        /* Check the response status */\n        client.onreadystatechange = function() {\n            if (client.readyState == 4) {\n                if (client.status == 200) {\n\n                    localStorage.setItem('token', JSON.parse(client.response));\n                    commonEvents.dispatchEvent('model.sync.login.successful', { token: client.response });\n                }\n                else {\n                    commonEvents.dispatchEvent('model.sync.login.failed');\n                }\n            }\n        };\n\n    \tclient.onerror = function(e) {\n\t\t\tconsole.log(e);\n        };\n\n        var data = \"email=\" + email + \"&\" + \"password=\" + password;\n\n        client.open('POST', syncUrls.login, true);\n        client.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n        client.send(data); /* Send to server */\n\n    };\n\n    modelSync.sync = function(){\n        // Disabled until network availability is fixed for cordova\n        // if( modelNetwork.isNetworkAvailable() ){\n            modelWorkout.getItemsToSync();\n        // }\n\n    }\n\n    function uploadWorkouts(workouts){\n        var client = new XMLHttpRequest(),\n            authHeaders = createAuthHeader();\n\n            if(authHeaders === false){\n                commonEvents.dispatchEvent('model.sync.login.required', {syncAfterLogin: true});\n               return false;\n            }\n\n            /* Check the response status */\n            client.onreadystatechange = function() {\n                if (client.readyState == 4){\n                    console.log('Response: ' + client.status);\n                    switch(client.status){\n                        case 200:\n                            modelWorkout.clear();\n                            commonEvents.dispatchEvent('model.sync.upload.successful', true);\n                            break;\n                        case 401:\n                            commonEvents.dispatchEvent('model.sync.login.required', {syncAfterLogin: true});\n                            break;\n                        default:\n                            commonEvents.dispatchEvent('model.sync.upload.failed');\n                            break;\n                    }\n                }\n            };\n\n            client.open('POST', syncUrls.upload, true);\n\n            var payload = JSON.stringify({ data: workouts });\n\n            client.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n            client.setRequestHeader(\"Accept\", \"application/json\");\n            client.setRequestHeader(authHeaders.key, authHeaders.value);\n            console.log('Sending data to the server');\n            client.send(payload); /* Send to server */\n    }\n\n})(window.app);\n","/*\n * Copyright (c) 2015 Samsung Electronics Co., Ltd. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*global document, tizen, console, window*/\n\n/**\n * Main application module.\n * Provides a namespace for other application modules.\n * Handles application life cycle.\n *\n * @module app\n * @requires {@link app.model.battery}\n * @requires {@link app.ui}\n * @namespace app\n */\n\nrequire('../js/model/models');\n\nrequire('./spec/WorkoutModelSpec');\nrequire('./spec/SyncModelSpec');\nrequire('./spec/unit/DriverFactorySpec');\nrequire('./spec/unit/WorkoutSpec');","import {Platform} from \"../../js/model/drivers/app.drivers.platform\";\nimport {DriverFactory} from \"../../js/model/drivers/app.driver.factory\";\n\ndescribe(\"Workout model\", function () {\n    var app = window.app || {};\n\n    var env = jasmine.getEnv();\n    env.randomizeTests(false);\n\n    beforeEach(function (done) {\n        var xmlhttp = new XMLHttpRequest(),\n            _this = this;\n\n        xmlhttp.onreadystatechange = function () {\n            if (this.readyState == 4 && this.status == 200) {\n                _this.waypoints = JSON.parse(this.responseText);\n                done();\n            }\n        };\n\n        xmlhttp.open(\"GET\", \"tests/data/455.json\", true);\n        xmlhttp.send();\n\n        this.modelWorkout = app.model.workout;\n        this.modelGeolocation = app.model.geolocation;\n\n        var platform = Platform.get(),\n            driverFactory = new DriverFactory(platform);\n\n        this.modelWorkout.init(driverFactory.buildHardwareDriver(platform));\n\n        window.addEventListener(\n            'model.workout.dbready',\n            function(e){\n                _this.modelWorkout.clear();\n            });\n\n        this.runWorkout = function(doneCallback){\n            navigator.geolocation.delay = 1;\n            navigator.geolocation.repeat = false;\n            navigator.geolocation.waypoints = this.waypoints;\n\n            this.modelGeolocation.init();\n            this.modelWorkout.start(this.modelWorkout.WORKOUT_TYPE_RUNNING);\n\n            setTimeout( function(){\n                    _this.modelWorkout.togglePause();\n                    doneCallback();\n                },\n                300);\n        };\n\n    });\n\n    it('should start and pause workout', function (done) {\n        var _this = this;\n\n        expect(typeof this.modelWorkout === 'object').toBeTruthy();\n\n        var pauseListener = function(e){\n            var workout = _this.modelWorkout.getWorkout();\n            expect(workout.points.length).toEqual(6);\n            window.removeEventListener('model.workout.paused', pauseListener);\n        };\n\n        window.addEventListener(\n            'model.workout.paused',\n            pauseListener\n        );\n\n        this.runWorkout(function(){\n            _this.modelWorkout.togglePause();\n            done();\n        });\n    });\n\n    it('should save the workout', function (done) {\n        var _this = this;\n\n        window.addEventListener(\n            'model.workout.save.successful',\n            function(e){\n                e.stopPropagation();\n                expect(e.detail).toBeTruthy();\n                done();\n            },\n            'model.workout.save.failed',\n            function(e){\n                e.stopPropagation();\n                expect(e.detail).toBeTruthy();\n                done();\n            }\n        );\n\n        this.runWorkout(function(){\n            _this.modelWorkout.save();\n        });\n    });\n\n    it('should load saved workouts', function (done) {\n        var _this = this;\n\n        window.addEventListener(\n            'model.workout.getlist.successful',\n            function(e){\n                e.stopPropagation();\n                expect(e.detail.length == 1).toBeTruthy();\n                expect(e.detail[0].status == _this.modelWorkout.WORKOUT_STATUS_SAVED).toBeTruthy();\n                done();\n            },\n            'model.workout.getlist.failed',\n            function(e){\n                e.stopPropagation();\n                done();\n            }\n        );\n\n        window.addEventListener(\n            'model.workout.save.successful',\n            function(e){\n                e.stopPropagation();\n                _this.modelWorkout.getList(_this.modelWorkout.WORKOUT_STATUS_SAVED);\n            },\n            'model.workout.save.failed',\n            function(e){\n                e.stopPropagation();\n                expect(e.detail).toBeTruthy();\n                done();\n            }\n        );\n\n        this.runWorkout(function(){\n            // _this.modelSync.sync = function(){};\n            _this.modelWorkout.save();\n        });\n    });\n\n    //it('should start the workout and update UI', function (done) {\n    //    var _this = this;\n    //\n    //    navigator.geolocation.delay = 1000;\n    //    navigator.geolocation.repeat = false;\n    //    navigator.geolocation.waypoints = this.waypoints;\n    //\n    //    this.modelGeolocation.init();\n    //    expect(typeof this.modelWorkout === 'object').toBeTruthy();\n    //    this.modelWorkout.start(this.modelWorkout.WORKOUT_TYPE_RUNNING);\n    //\n    //    window.addEventListener(\n    //        'model.workout.updateui',\n    //        function(e){\n    //            e.stopPropagation();\n    //            var data = e.detail;\n    //            console.log(data);\n    //        }\n    //    );\n    //\n    //    setTimeout( function(){\n    //            done();\n    //        },\n    //        4000);\n    //});\n\n});\n","import {Platform} from \"../../js/model/drivers/app.drivers.platform\";\nimport {DriverFactory} from \"../../js/model/drivers/app.driver.factory\";\n\ndescribe(\"Sync\", function () {\n    var app = window.app || {};\n\n    var env = jasmine.getEnv();\n    env.randomizeTests(false);\n\n    app.model.sync.init(\n        'http://tracy.test/api/login',\n        'http://tracy.test/api/workouts'\n    );\n\n    beforeEach(function (done) {\n        var xmlhttp = new XMLHttpRequest(),\n            _this = this;\n\n        xmlhttp.onreadystatechange = function () {\n            if (this.readyState == 4 && this.status == 200) {\n                _this.waypoints = JSON.parse(this.responseText);\n                done();\n            }\n        };\n\n        xmlhttp.open(\"GET\", \"tests/data/455.json\", true);\n        xmlhttp.send();\n\n        this.modelWorkout = app.model.workout;\n        this.modelGeolocation = app.model.geolocation;\n        this.modelSync = app.model.sync;\n\n        var platform = Platform.get(),\n            driverFactory = new DriverFactory(platform);\n\n        this.modelWorkout.init(driverFactory.buildHardwareDriver(platform));\n\n        window.addEventListener(\n            'model.workout.dbready',\n            function(e){\n                _this.modelWorkout.clear();\n            });\n\n        this.runWorkout = function(doneCallback){\n            navigator.geolocation.delay = 1;\n            navigator.geolocation.repeat = false;\n            navigator.geolocation.waypoints = this.waypoints;\n\n            this.modelGeolocation.init();\n            this.modelWorkout.start(this.modelWorkout.WORKOUT_TYPE_RUNNING);\n\n            setTimeout( function(){\n                    _this.modelWorkout.togglePause();\n                    doneCallback();\n                },\n                300);\n        };\n\n    });\n\n    it('should login', function (done) {\n        window.addEventListener(\n            'model.sync.login.successful',\n            function(e){\n                e.stopPropagation();\n                expect(e.detail.hasOwnProperty('token')).toBeTruthy();\n                expect(e.detail.token.length > 0).toBeTruthy();\n                done();\n            });\n\n        this.modelSync.login( 'demo@email.com', '123123' );\n    });\n\n    it('should login with token and upload workouts', function (done) {\n        var _this = this;\n\n\n        window.addEventListener(\n            'model.sync.upload.successful',\n            function(e){\n                e.stopPropagation();\n                expect(e.detail).toBeTruthy();\n                done();\n            });\n\n        this.runWorkout(function(){\n            _this.modelWorkout.save();\n            _this.modelSync.sync();\n        });\n    });\n\n});\n","import {PLATFORMS} from \"../../../js/model/drivers/app.drivers.platform\";\nimport {HardwareDriverTizen} from \"../../../js/model/drivers/tizen/app.drivers.tizen.hardware\";\nimport {HardwareDriverAndroid} from \"../../../js/model/drivers/android/app.drivers.android.hardware\";\nimport {BatteryDriverTizen} from \"../../../js/model/drivers/tizen/app.drivers.tizen.battery\";\nimport {BatteryDriverAndroid} from \"../../../js/model/drivers/android/app.drivers.android.battery\";\nimport {NetworkDriverTizen} from \"../../../js/model/drivers/tizen/app.drivers.tizen.network\";\nimport {NetworkDriverAndroid} from \"../../../js/model/drivers/android/app.drivers.android.network\";\n\nimport {DriverFactory} from \"../../../js/model/drivers/app.driver.factory\";\n\n\ndescribe(\"DriverFactory\", function () {\n    it('should create drivers for tizen', function () {\n\n        var platform = PLATFORMS.TIZEN,\n            driverFactory = new DriverFactory(platform),\n            batteryDriver = driverFactory.buildBatteryDriver(platform),\n            networkDriver = driverFactory.buildNetworkDriver(platform),\n            hardwareDriver = driverFactory.buildHardwareDriver(platform);\n\n        expect(batteryDriver instanceof BatteryDriverTizen).toBeTruthy();\n        expect(networkDriver instanceof NetworkDriverTizen).toBeTruthy();\n        expect(hardwareDriver instanceof HardwareDriverTizen).toBeTruthy();\n    });\n\n    it('should create drivers for android', function () {\n\n        var platform = PLATFORMS.ANDROID,\n            driverFactory = new DriverFactory(platform),\n            batteryDriver = driverFactory.buildBatteryDriver(platform),\n            networkDriver = driverFactory.buildNetworkDriver(platform),\n            hardwareDriver = driverFactory.buildHardwareDriver(platform);\n\n        expect(batteryDriver instanceof BatteryDriverAndroid).toBeTruthy();\n        expect(networkDriver instanceof NetworkDriverAndroid).toBeTruthy();\n        expect(hardwareDriver instanceof HardwareDriverAndroid).toBeTruthy();\n    });\n});\n","import {CyclingWorkout} from '../../../../src/js/workout/app.workout.cycling_workout.js';\nimport {RunningWorkout} from \"../../../../src/js/workout/app.workout.running_workout\";\n\n\ndescribe(\"Workout\", function () {\n    it('should calculate distance', function () {\n        let timeA = 1551018055000,\n            timeB = timeA + 20000, // +20 sec\n            pointA = new Point(\n            0,\n            45.8849114,\n            19.2545559,\n            0,\n            0,\n                timeA\n            ),\n\n            pointB = new Point(\n                0,\n                45.8856601,\n                19.2553514,\n                0,\n                0,\n                timeB\n            ),\n\n            expectedDistance = 103.54782304590353, // meters\n            workout = new CyclingWorkout(),\n            distance = workout._calculateDistance(pointA, pointB);\n\n        expect(distance).toEqual(expectedDistance);\n    });\n\n    it('should calculate speed', function () {\n        let timeA = 1551018055000,\n            timeB = timeA + 20000, // +20 sec\n            pointA = new Point(\n            0,\n            45.8849114,\n            19.2545559,\n            0,\n            0,\n            timeA\n            ),\n\n            pointB = new Point(\n                0,\n                45.8856601,\n                19.2553514,\n                0,\n                0,\n                timeB\n            ),\n\n            expectedSpeed = 18.638608148262635,\n            workout = new CyclingWorkout(),\n            speed = workout._calculateSpeed(pointA, pointB);\n\n        expect(speed).toEqual(expectedSpeed);\n    });\n\n    it('should calculate pace', function () {\n        let timeA = 1551018055000,\n            timeB = timeA + 40000, // +40 sec\n            pointA = new Point(\n            0,\n            45.8849114,\n            19.2545559,\n            0,\n            0,\n            timeA\n            ),\n\n            pointB = new Point(\n                0,\n                45.8856601,\n                19.2553514,\n                0,\n                0,\n                timeB\n            ),\n\n            expectedPace = 6.438248985409653,\n            workout = new RunningWorkout(),\n            pace = workout._calculatePace(pointA, pointB);\n\n        expect(pace).toEqual(expectedPace);\n    });\n\n    it('should add points and calculate distance and pace', function () {\n        let timeA = 1551018055000,\n            timeB = timeA + 40000, // +40 sec\n            pointA = new Point(\n                0,\n                45.8849114,\n                19.2545559,\n                0,\n                0,\n                timeA\n            ),\n\n            pointB = new Point(\n                0,\n                45.8856601,\n                19.2553514,\n                0,\n                0,\n                timeB\n            ),\n\n            expectedPace = 6.438248985409653,\n            expectedDistance = 103.54782304590353 / 1000, // km\n            workout = new RunningWorkout();\n\n            workout.addPoint(pointA);\n            workout.addPoint(pointB);\n\n        expect(workout.speed).toEqual(expectedPace);\n        expect(workout.distance).toEqual(expectedDistance);\n    });\n\n    it('should add points and calculate distance and speed', function () {\n        let timeA = 1551018055000,\n            timeB = timeA + 20000, // +20 sec\n            pointA = new Point(\n                0,\n                45.8849114,\n                19.2545559,\n                0,\n                0,\n                timeA\n            ),\n\n            pointB = new Point(\n                0,\n                45.8856601,\n                19.2553514,\n                0,\n                0,\n                timeB\n            ),\n\n            expectedSpeed = 18.638608148262635, // km/h\n            expectedDistance = 103.54782304590353 / 1000, // km\n            workout = new CyclingWorkout();\n\n        workout.addPoint(pointA);\n        workout.addPoint(pointB);\n\n        expect(workout.speed).toEqual(expectedSpeed);\n        expect(workout.distance).toEqual(expectedDistance);\n    });\n});\n"],"sourceRoot":""}